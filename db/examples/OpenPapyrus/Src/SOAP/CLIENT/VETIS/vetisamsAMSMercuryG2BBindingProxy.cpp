/* vetisamsAMSMercuryG2BBindingProxy.cpp
   Generated by gSOAP 2.8.8 from vetisams.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "vetisamsAMSMercuryG2BBindingProxy.h"

AMSMercuryG2BBindingProxy::AMSMercuryG2BBindingProxy()
{
	AMSMercuryG2BBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

AMSMercuryG2BBindingProxy::AMSMercuryG2BBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

AMSMercuryG2BBindingProxy::AMSMercuryG2BBindingProxy(const char *url)
{
	AMSMercuryG2BBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

AMSMercuryG2BBindingProxy::AMSMercuryG2BBindingProxy(soap_mode iomode)
{
	AMSMercuryG2BBindingProxy_init(iomode, iomode);
}

AMSMercuryG2BBindingProxy::AMSMercuryG2BBindingProxy(const char *url, soap_mode iomode)
{
	AMSMercuryG2BBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

AMSMercuryG2BBindingProxy::AMSMercuryG2BBindingProxy(soap_mode imode, soap_mode omode)
{
	AMSMercuryG2BBindingProxy_init(imode, omode);
}

AMSMercuryG2BBindingProxy::~AMSMercuryG2BBindingProxy()
{ }

void AMSMercuryG2BBindingProxy::AMSMercuryG2BBindingProxy_init(soap_mode imode, soap_mode omode)
{
	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"app", "http://api.vetrf.ru/schema/cdm/application", NULL, NULL},
	{"base", "http://api.vetrf.ru/schema/cdm/base", NULL, NULL},
	{"dic", "http://api.vetrf.ru/schema/cdm/dictionary/v2", NULL, NULL},
	{"vd", "http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2", NULL, NULL},
	{"ns2", "http://api.vetrf.ru/schema/cdm/base/ws-definitions", NULL, NULL},
	{"apps", "http://api.vetrf.ru/schema/cdm/application/service", NULL, NULL},
	{"ws", "http://api.vetrf.ru/schema/cdm/application/ws-definitions", NULL, NULL},
	{"g2b", "http://api.vetrf.ru/schema/cdm/mercury/g2b/service/v2", NULL, NULL},
	{"g2ba", "http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void AMSMercuryG2BBindingProxy::destroy()
{
	soap_destroy(this);
	soap_end(this);
}

void AMSMercuryG2BBindingProxy::reset()
{
	destroy();
	soap_done(this);
	soap_init(this);
	AMSMercuryG2BBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void AMSMercuryG2BBindingProxy::soap_noheader()
{
	this->header = NULL;
}

const SOAP_ENV__Header *AMSMercuryG2BBindingProxy::soap_header()
{
	return this->header;
}

const SOAP_ENV__Fault *AMSMercuryG2BBindingProxy::soap_fault()
{
	return this->fault;
}

const char *AMSMercuryG2BBindingProxy::soap_fault_string()
{
	return *soap_faultstring(this);
}

const char *AMSMercuryG2BBindingProxy::soap_fault_detail()
{
	return *soap_faultdetail(this);
}

int AMSMercuryG2BBindingProxy::soap_close_socket()
{
	return soap_closesock(this);
}

int AMSMercuryG2BBindingProxy::soap_force_close_socket()
{
	return soap_force_closesock(this);
}

void AMSMercuryG2BBindingProxy::soap_print_fault(FILE *fd)
{
	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void AMSMercuryG2BBindingProxy::soap_stream_fault(std::ostream& os)
{
	::soap_stream_fault(this, os);
}
#endif

char *AMSMercuryG2BBindingProxy::soap_sprint_fault(char *buf, size_t len)
{
	return ::soap_sprint_fault(this, buf, len);
}
#endif

int AMSMercuryG2BBindingProxy::processIncomingConsignmentRequest(const char *endpoint, const char *soap_action, g2ba__ProcessIncomingConsignmentRequest *g2ba__processIncomingConsignmentRequest, g2ba__ProcessIncomingConsignmentResponse *g2ba__processIncomingConsignmentResponse)
{
	struct soap *soap = this;
	struct __g2b__processIncomingConsignmentRequest soap_tmp___g2b__processIncomingConsignmentRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "processIncomingConsignmentRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__processIncomingConsignmentRequest.g2ba__processIncomingConsignmentRequest = g2ba__processIncomingConsignmentRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__processIncomingConsignmentRequest(soap, &soap_tmp___g2b__processIncomingConsignmentRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__processIncomingConsignmentRequest(soap, &soap_tmp___g2b__processIncomingConsignmentRequest, "-g2b:processIncomingConsignmentRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__processIncomingConsignmentRequest(soap, &soap_tmp___g2b__processIncomingConsignmentRequest, "-g2b:processIncomingConsignmentRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__processIncomingConsignmentResponse)
		return soap_closesock(soap);
	g2ba__processIncomingConsignmentResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__processIncomingConsignmentResponse->soap_get(soap, "g2ba:processIncomingConsignmentResponse", "g2ba:ProcessIncomingConsignmentResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::prepareOutgoingConsignmentRequest(const char *endpoint, const char *soap_action, g2ba__PrepareOutgoingConsignmentRequest *g2ba__prepareOutgoingConsignmentRequest, g2ba__PrepareOutgoingConsignmentResponse *g2ba__prepareOutgoingConsignmentResponse)
{
	struct soap *soap = this;
	struct __g2b__prepareOutgoingConsignmentRequest soap_tmp___g2b__prepareOutgoingConsignmentRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "prepareOutgoingConsignmentRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__prepareOutgoingConsignmentRequest.g2ba__prepareOutgoingConsignmentRequest = g2ba__prepareOutgoingConsignmentRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__prepareOutgoingConsignmentRequest(soap, &soap_tmp___g2b__prepareOutgoingConsignmentRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__prepareOutgoingConsignmentRequest(soap, &soap_tmp___g2b__prepareOutgoingConsignmentRequest, "-g2b:prepareOutgoingConsignmentRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__prepareOutgoingConsignmentRequest(soap, &soap_tmp___g2b__prepareOutgoingConsignmentRequest, "-g2b:prepareOutgoingConsignmentRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__prepareOutgoingConsignmentResponse)
		return soap_closesock(soap);
	g2ba__prepareOutgoingConsignmentResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__prepareOutgoingConsignmentResponse->soap_get(soap, "g2ba:prepareOutgoingConsignmentResponse", "g2ba:PrepareOutgoingConsignmentResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::registerProductionOperationRequest(const char *endpoint, const char *soap_action, g2ba__RegisterProductionOperationRequest *g2ba__registerProductionOperationRequest, g2ba__RegisterProductionOperationResponse *g2ba__registerProductionOperationResponse)
{
	struct soap *soap = this;
	struct __g2b__registerProductionOperationRequest soap_tmp___g2b__registerProductionOperationRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "registerProductionOperationRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__registerProductionOperationRequest.g2ba__registerProductionOperationRequest = g2ba__registerProductionOperationRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__registerProductionOperationRequest(soap, &soap_tmp___g2b__registerProductionOperationRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__registerProductionOperationRequest(soap, &soap_tmp___g2b__registerProductionOperationRequest, "-g2b:registerProductionOperationRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__registerProductionOperationRequest(soap, &soap_tmp___g2b__registerProductionOperationRequest, "-g2b:registerProductionOperationRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__registerProductionOperationResponse)
		return soap_closesock(soap);
	g2ba__registerProductionOperationResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__registerProductionOperationResponse->soap_get(soap, "g2ba:registerProductionOperationResponse", "g2ba:RegisterProductionOperationResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::mergeStockEntriesRequest(const char *endpoint, const char *soap_action, g2ba__MergeStockEntriesRequest *g2ba__mergeStockEntriesRequest, g2ba__MergeStockEntriesResponse *g2ba__mergeStockEntriesResponse)
{
	struct soap *soap = this;
	struct __g2b__mergeStockEntriesRequest soap_tmp___g2b__mergeStockEntriesRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "mergeStockEntriesRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__mergeStockEntriesRequest.g2ba__mergeStockEntriesRequest = g2ba__mergeStockEntriesRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__mergeStockEntriesRequest(soap, &soap_tmp___g2b__mergeStockEntriesRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__mergeStockEntriesRequest(soap, &soap_tmp___g2b__mergeStockEntriesRequest, "-g2b:mergeStockEntriesRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__mergeStockEntriesRequest(soap, &soap_tmp___g2b__mergeStockEntriesRequest, "-g2b:mergeStockEntriesRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__mergeStockEntriesResponse)
		return soap_closesock(soap);
	g2ba__mergeStockEntriesResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__mergeStockEntriesResponse->soap_get(soap, "g2ba:mergeStockEntriesResponse", "g2ba:MergeStockEntriesResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::withdrawVetDocumentRequest(const char *endpoint, const char *soap_action, g2ba__WithdrawVetDocumentRequest *g2ba__withdrawVetDocumentRequest, g2ba__WithdrawVetDocumentResponse *g2ba__withdrawVetDocumentResponse)
{
	struct soap *soap = this;
	struct __g2b__withdrawVetDocumentRequest soap_tmp___g2b__withdrawVetDocumentRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "withdrawVetDocumentRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__withdrawVetDocumentRequest.g2ba__withdrawVetDocumentRequest = g2ba__withdrawVetDocumentRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__withdrawVetDocumentRequest(soap, &soap_tmp___g2b__withdrawVetDocumentRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__withdrawVetDocumentRequest(soap, &soap_tmp___g2b__withdrawVetDocumentRequest, "-g2b:withdrawVetDocumentRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__withdrawVetDocumentRequest(soap, &soap_tmp___g2b__withdrawVetDocumentRequest, "-g2b:withdrawVetDocumentRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__withdrawVetDocumentResponse)
		return soap_closesock(soap);
	g2ba__withdrawVetDocumentResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__withdrawVetDocumentResponse->soap_get(soap, "g2ba:withdrawVetDocumentResponse", "g2ba:WithdrawVetDocumentResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::modifyBusinessEntityRequest(const char *endpoint, const char *soap_action, g2ba__ModifyBusinessEntityRequest *g2ba__modifyBusinessEntityRequest, g2ba__ModifyBusinessEntityResponse *g2ba__modifyBusinessEntityResponse)
{
	struct soap *soap = this;
	struct __g2b__modifyBusinessEntityRequest soap_tmp___g2b__modifyBusinessEntityRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "modifyBusinessEntityRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__modifyBusinessEntityRequest.g2ba__modifyBusinessEntityRequest = g2ba__modifyBusinessEntityRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__modifyBusinessEntityRequest(soap, &soap_tmp___g2b__modifyBusinessEntityRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__modifyBusinessEntityRequest(soap, &soap_tmp___g2b__modifyBusinessEntityRequest, "-g2b:modifyBusinessEntityRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__modifyBusinessEntityRequest(soap, &soap_tmp___g2b__modifyBusinessEntityRequest, "-g2b:modifyBusinessEntityRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__modifyBusinessEntityResponse)
		return soap_closesock(soap);
	g2ba__modifyBusinessEntityResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__modifyBusinessEntityResponse->soap_get(soap, "g2ba:modifyBusinessEntityResponse", "g2ba:ModifyBusinessEntityResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::modifyEnterpriseRequest(const char *endpoint, const char *soap_action, g2ba__ModifyEnterpriseRequest *g2ba__modifyEnterpriseRequest, g2ba__ModifyEnterpriseResponse *g2ba__modifyEnterpriseResponse)
{
	struct soap *soap = this;
	struct __g2b__modifyEnterpriseRequest soap_tmp___g2b__modifyEnterpriseRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "modifyEnterpriseRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__modifyEnterpriseRequest.g2ba__modifyEnterpriseRequest = g2ba__modifyEnterpriseRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__modifyEnterpriseRequest(soap, &soap_tmp___g2b__modifyEnterpriseRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__modifyEnterpriseRequest(soap, &soap_tmp___g2b__modifyEnterpriseRequest, "-g2b:modifyEnterpriseRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__modifyEnterpriseRequest(soap, &soap_tmp___g2b__modifyEnterpriseRequest, "-g2b:modifyEnterpriseRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__modifyEnterpriseResponse)
		return soap_closesock(soap);
	g2ba__modifyEnterpriseResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__modifyEnterpriseResponse->soap_get(soap, "g2ba:modifyEnterpriseResponse", "g2ba:ModifyEnterpriseResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::modifyActivityLocationsRequest(const char *endpoint, const char *soap_action, g2ba__ModifyActivityLocationsRequest *g2ba__modifyActivityLocationsRequest, g2ba__ModifyActivityLocationsResponse *g2ba__modifyActivityLocationsResponse)
{
	struct soap *soap = this;
	struct __g2b__modifyActivityLocationsRequest soap_tmp___g2b__modifyActivityLocationsRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "modifyActivityLocationsRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__modifyActivityLocationsRequest.g2ba__modifyActivityLocationsRequest = g2ba__modifyActivityLocationsRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__modifyActivityLocationsRequest(soap, &soap_tmp___g2b__modifyActivityLocationsRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__modifyActivityLocationsRequest(soap, &soap_tmp___g2b__modifyActivityLocationsRequest, "-g2b:modifyActivityLocationsRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__modifyActivityLocationsRequest(soap, &soap_tmp___g2b__modifyActivityLocationsRequest, "-g2b:modifyActivityLocationsRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__modifyActivityLocationsResponse)
		return soap_closesock(soap);
	g2ba__modifyActivityLocationsResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__modifyActivityLocationsResponse->soap_get(soap, "g2ba:modifyActivityLocationsResponse", "g2ba:ModifyActivityLocationsResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::resolveDiscrepancyRequest(const char *endpoint, const char *soap_action, g2ba__ResolveDiscrepancyRequest *g2ba__resolveDiscrepancyRequest, g2ba__ResolveDiscrepancyResponse *g2ba__resolveDiscrepancyResponse)
{
	struct soap *soap = this;
	struct __g2b__resolveDiscrepancyRequest soap_tmp___g2b__resolveDiscrepancyRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "resolveDiscrepancyRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__resolveDiscrepancyRequest.g2ba__resolveDiscrepancyRequest = g2ba__resolveDiscrepancyRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__resolveDiscrepancyRequest(soap, &soap_tmp___g2b__resolveDiscrepancyRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__resolveDiscrepancyRequest(soap, &soap_tmp___g2b__resolveDiscrepancyRequest, "-g2b:resolveDiscrepancyRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__resolveDiscrepancyRequest(soap, &soap_tmp___g2b__resolveDiscrepancyRequest, "-g2b:resolveDiscrepancyRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__resolveDiscrepancyResponse)
		return soap_closesock(soap);
	g2ba__resolveDiscrepancyResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__resolveDiscrepancyResponse->soap_get(soap, "g2ba:resolveDiscrepancyResponse", "g2ba:ResolveDiscrepancyResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::modifyProducerStockListRequest(const char *endpoint, const char *soap_action, g2ba__ModifyProducerStockListRequest *g2ba__modifyProducerStockListRequest, g2ba__ModifyProducerStockListResponse *g2ba__modifyProducerStockListResponse)
{
	struct soap *soap = this;
	struct __g2b__modifyProducerStockListRequest soap_tmp___g2b__modifyProducerStockListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "modifyProducerStockListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__modifyProducerStockListRequest.g2ba__modifyProducerStockListRequest = g2ba__modifyProducerStockListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__modifyProducerStockListRequest(soap, &soap_tmp___g2b__modifyProducerStockListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__modifyProducerStockListRequest(soap, &soap_tmp___g2b__modifyProducerStockListRequest, "-g2b:modifyProducerStockListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__modifyProducerStockListRequest(soap, &soap_tmp___g2b__modifyProducerStockListRequest, "-g2b:modifyProducerStockListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__modifyProducerStockListResponse)
		return soap_closesock(soap);
	g2ba__modifyProducerStockListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__modifyProducerStockListResponse->soap_get(soap, "g2ba:modifyProducerStockListResponse", "g2ba:ModifyProducerStockListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getVetDocumentByUuidRequest(const char *endpoint, const char *soap_action, g2ba__GetVetDocumentByUuidRequest *g2ba__getVetDocumentByUuidRequest, g2ba__GetVetDocumentByUuidResponse *g2ba__getVetDocumentByUuidResponse)
{
	struct soap *soap = this;
	struct __g2b__getVetDocumentByUuidRequest soap_tmp___g2b__getVetDocumentByUuidRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getVetDocumentByUuidRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getVetDocumentByUuidRequest.g2ba__getVetDocumentByUuidRequest = g2ba__getVetDocumentByUuidRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getVetDocumentByUuidRequest(soap, &soap_tmp___g2b__getVetDocumentByUuidRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getVetDocumentByUuidRequest(soap, &soap_tmp___g2b__getVetDocumentByUuidRequest, "-g2b:getVetDocumentByUuidRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getVetDocumentByUuidRequest(soap, &soap_tmp___g2b__getVetDocumentByUuidRequest, "-g2b:getVetDocumentByUuidRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getVetDocumentByUuidResponse)
		return soap_closesock(soap);
	g2ba__getVetDocumentByUuidResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getVetDocumentByUuidResponse->soap_get(soap, "g2ba:getVetDocumentByUuidResponse", "g2ba:GetVetDocumentByUuidResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getVetDocumentListRequest(const char *endpoint, const char *soap_action, g2ba__GetVetDocumentListRequest *g2ba__getVetDocumentListRequest, g2ba__GetVetDocumentListResponse *g2ba__getVetDocumentListResponse)
{
	struct soap *soap = this;
	struct __g2b__getVetDocumentListRequest soap_tmp___g2b__getVetDocumentListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getVetDocumentListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getVetDocumentListRequest.g2ba__getVetDocumentListRequest = g2ba__getVetDocumentListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getVetDocumentListRequest(soap, &soap_tmp___g2b__getVetDocumentListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getVetDocumentListRequest(soap, &soap_tmp___g2b__getVetDocumentListRequest, "-g2b:getVetDocumentListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getVetDocumentListRequest(soap, &soap_tmp___g2b__getVetDocumentListRequest, "-g2b:getVetDocumentListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getVetDocumentListResponse)
		return soap_closesock(soap);
	g2ba__getVetDocumentListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getVetDocumentListResponse->soap_get(soap, "g2ba:getVetDocumentListResponse", "g2ba:GetVetDocumentListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getVetDocumentChangesListRequest(const char *endpoint, const char *soap_action, g2ba__GetVetDocumentChangesListRequest *g2ba__getVetDocumentChangesListRequest, g2ba__GetVetDocumentChangesListResponse *g2ba__getVetDocumentChangesListResponse)
{
	struct soap *soap = this;
	struct __g2b__getVetDocumentChangesListRequest soap_tmp___g2b__getVetDocumentChangesListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getVetDocumentChangesListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getVetDocumentChangesListRequest.g2ba__getVetDocumentChangesListRequest = g2ba__getVetDocumentChangesListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getVetDocumentChangesListRequest(soap, &soap_tmp___g2b__getVetDocumentChangesListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getVetDocumentChangesListRequest(soap, &soap_tmp___g2b__getVetDocumentChangesListRequest, "-g2b:getVetDocumentChangesListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getVetDocumentChangesListRequest(soap, &soap_tmp___g2b__getVetDocumentChangesListRequest, "-g2b:getVetDocumentChangesListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getVetDocumentChangesListResponse)
		return soap_closesock(soap);
	g2ba__getVetDocumentChangesListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getVetDocumentChangesListResponse->soap_get(soap, "g2ba:getVetDocumentChangesListResponse", "g2ba:GetVetDocumentChangesListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getStockEntryByGuidRequest(const char *endpoint, const char *soap_action, g2ba__GetStockEntryByGuidRequest *g2ba__getStockEntryByGuidRequest, g2ba__GetStockEntryByGuidResponse *g2ba__getStockEntryByGuidResponse)
{
	struct soap *soap = this;
	struct __g2b__getStockEntryByGuidRequest soap_tmp___g2b__getStockEntryByGuidRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getStockEntryByGuidRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getStockEntryByGuidRequest.g2ba__getStockEntryByGuidRequest = g2ba__getStockEntryByGuidRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getStockEntryByGuidRequest(soap, &soap_tmp___g2b__getStockEntryByGuidRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getStockEntryByGuidRequest(soap, &soap_tmp___g2b__getStockEntryByGuidRequest, "-g2b:getStockEntryByGuidRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getStockEntryByGuidRequest(soap, &soap_tmp___g2b__getStockEntryByGuidRequest, "-g2b:getStockEntryByGuidRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getStockEntryByGuidResponse)
		return soap_closesock(soap);
	g2ba__getStockEntryByGuidResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getStockEntryByGuidResponse->soap_get(soap, "g2ba:getStockEntryByGuidResponse", "g2ba:GetStockEntryByGuidResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getStockEntryByUuidRequest(const char *endpoint, const char *soap_action, g2ba__GetStockEntryByUuidRequest *g2ba__getStockEntryByUuidRequest, g2ba__GetStockEntryByUuidResponse *g2ba__getStockEntryByUuidResponse)
{
	struct soap *soap = this;
	struct __g2b__getStockEntryByUuidRequest soap_tmp___g2b__getStockEntryByUuidRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getStockEntryByUuidRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getStockEntryByUuidRequest.g2ba__getStockEntryByUuidRequest = g2ba__getStockEntryByUuidRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getStockEntryByUuidRequest(soap, &soap_tmp___g2b__getStockEntryByUuidRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getStockEntryByUuidRequest(soap, &soap_tmp___g2b__getStockEntryByUuidRequest, "-g2b:getStockEntryByUuidRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getStockEntryByUuidRequest(soap, &soap_tmp___g2b__getStockEntryByUuidRequest, "-g2b:getStockEntryByUuidRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getStockEntryByUuidResponse)
		return soap_closesock(soap);
	g2ba__getStockEntryByUuidResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getStockEntryByUuidResponse->soap_get(soap, "g2ba:getStockEntryByUuidResponse", "g2ba:GetStockEntryByUuidResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getStockEntryListRequest(const char *endpoint, const char *soap_action, g2ba__GetStockEntryListRequest *g2ba__getStockEntryListRequest, g2ba__GetStockEntryListResponse *g2ba__getStockEntryListResponse)
{
	struct soap *soap = this;
	struct __g2b__getStockEntryListRequest soap_tmp___g2b__getStockEntryListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getStockEntryListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getStockEntryListRequest.g2ba__getStockEntryListRequest = g2ba__getStockEntryListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getStockEntryListRequest(soap, &soap_tmp___g2b__getStockEntryListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getStockEntryListRequest(soap, &soap_tmp___g2b__getStockEntryListRequest, "-g2b:getStockEntryListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getStockEntryListRequest(soap, &soap_tmp___g2b__getStockEntryListRequest, "-g2b:getStockEntryListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getStockEntryListResponse)
		return soap_closesock(soap);
	g2ba__getStockEntryListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getStockEntryListResponse->soap_get(soap, "g2ba:getStockEntryListResponse", "g2ba:GetStockEntryListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getStockEntryChangesListRequest(const char *endpoint, const char *soap_action, g2ba__GetStockEntryChangesListRequest *g2ba__getStockEntryChangesListRequest, g2ba__GetStockEntryChangesListResponse *g2ba__getStockEntryChangesListResponse)
{
	struct soap *soap = this;
	struct __g2b__getStockEntryChangesListRequest soap_tmp___g2b__getStockEntryChangesListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getStockEntryChangesListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getStockEntryChangesListRequest.g2ba__getStockEntryChangesListRequest = g2ba__getStockEntryChangesListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getStockEntryChangesListRequest(soap, &soap_tmp___g2b__getStockEntryChangesListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getStockEntryChangesListRequest(soap, &soap_tmp___g2b__getStockEntryChangesListRequest, "-g2b:getStockEntryChangesListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getStockEntryChangesListRequest(soap, &soap_tmp___g2b__getStockEntryChangesListRequest, "-g2b:getStockEntryChangesListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getStockEntryChangesListResponse)
		return soap_closesock(soap);
	g2ba__getStockEntryChangesListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getStockEntryChangesListResponse->soap_get(soap, "g2ba:getStockEntryChangesListResponse", "g2ba:GetStockEntryChangesListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getStockEntryVersionListRequest(const char *endpoint, const char *soap_action, g2ba__GetStockEntryVersionListRequest *g2ba__getStockEntryVersionListRequest, g2ba__GetStockEntryVersionListResponse *g2ba__getStockEntryVersionListResponse)
{
	struct soap *soap = this;
	struct __g2b__getStockEntryVersionListRequest soap_tmp___g2b__getStockEntryVersionListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getStockEntryVersionListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getStockEntryVersionListRequest.g2ba__getStockEntryVersionListRequest = g2ba__getStockEntryVersionListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getStockEntryVersionListRequest(soap, &soap_tmp___g2b__getStockEntryVersionListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getStockEntryVersionListRequest(soap, &soap_tmp___g2b__getStockEntryVersionListRequest, "-g2b:getStockEntryVersionListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getStockEntryVersionListRequest(soap, &soap_tmp___g2b__getStockEntryVersionListRequest, "-g2b:getStockEntryVersionListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getStockEntryVersionListResponse)
		return soap_closesock(soap);
	g2ba__getStockEntryVersionListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getStockEntryVersionListResponse->soap_get(soap, "g2ba:getStockEntryVersionListResponse", "g2ba:GetStockEntryVersionListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::updateTransportMovementDetailsRequest(const char *endpoint, const char *soap_action, g2ba__UpdateTransportMovementDetailsRequest *g2ba__updateTransportMovementDetailsRequest, g2ba__UpdateTransportMovementDetailsResponse *g2ba__updateTransportMovementDetailsResponse)
{
	struct soap *soap = this;
	struct __g2b__updateTransportMovementDetailsRequest soap_tmp___g2b__updateTransportMovementDetailsRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "updateTransportMovementDetailsRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__updateTransportMovementDetailsRequest.g2ba__updateTransportMovementDetailsRequest = g2ba__updateTransportMovementDetailsRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__updateTransportMovementDetailsRequest(soap, &soap_tmp___g2b__updateTransportMovementDetailsRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__updateTransportMovementDetailsRequest(soap, &soap_tmp___g2b__updateTransportMovementDetailsRequest, "-g2b:updateTransportMovementDetailsRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__updateTransportMovementDetailsRequest(soap, &soap_tmp___g2b__updateTransportMovementDetailsRequest, "-g2b:updateTransportMovementDetailsRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__updateTransportMovementDetailsResponse)
		return soap_closesock(soap);
	g2ba__updateTransportMovementDetailsResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__updateTransportMovementDetailsResponse->soap_get(soap, "g2ba:updateTransportMovementDetailsResponse", "g2ba:UpdateTransportMovementDetailsResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::updateVeterinaryEventsRequest(const char *endpoint, const char *soap_action, g2ba__UpdateVeterinaryEventsRequest *g2ba__updateVeterinaryEventsRequest, g2ba__UpdateVeterinaryEventsResponse *g2ba__updateVeterinaryEventsResponse)
{
	struct soap *soap = this;
	struct __g2b__updateVeterinaryEventsRequest soap_tmp___g2b__updateVeterinaryEventsRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "updateVeterinaryEventsRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__updateVeterinaryEventsRequest.g2ba__updateVeterinaryEventsRequest = g2ba__updateVeterinaryEventsRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__updateVeterinaryEventsRequest(soap, &soap_tmp___g2b__updateVeterinaryEventsRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__updateVeterinaryEventsRequest(soap, &soap_tmp___g2b__updateVeterinaryEventsRequest, "-g2b:updateVeterinaryEventsRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__updateVeterinaryEventsRequest(soap, &soap_tmp___g2b__updateVeterinaryEventsRequest, "-g2b:updateVeterinaryEventsRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__updateVeterinaryEventsResponse)
		return soap_closesock(soap);
	g2ba__updateVeterinaryEventsResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__updateVeterinaryEventsResponse->soap_get(soap, "g2ba:updateVeterinaryEventsResponse", "g2ba:UpdateVeterinaryEventsResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::checkShipmentRegionalizationRequest(const char *endpoint, const char *soap_action, g2ba__CheckShipmentRegionalizationRequest *g2ba__checkShipmentRegionalizationRequest, g2ba__CheckShipmentRegionalizationResponse *g2ba__checkShipmentRegionalizationResponse)
{
	struct soap *soap = this;
	struct __g2b__checkShipmentRegionalizationRequest soap_tmp___g2b__checkShipmentRegionalizationRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "checkShipmentRegionalizationRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__checkShipmentRegionalizationRequest.g2ba__checkShipmentRegionalizationRequest = g2ba__checkShipmentRegionalizationRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__checkShipmentRegionalizationRequest(soap, &soap_tmp___g2b__checkShipmentRegionalizationRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__checkShipmentRegionalizationRequest(soap, &soap_tmp___g2b__checkShipmentRegionalizationRequest, "-g2b:checkShipmentRegionalizationRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__checkShipmentRegionalizationRequest(soap, &soap_tmp___g2b__checkShipmentRegionalizationRequest, "-g2b:checkShipmentRegionalizationRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__checkShipmentRegionalizationResponse)
		return soap_closesock(soap);
	g2ba__checkShipmentRegionalizationResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__checkShipmentRegionalizationResponse->soap_get(soap, "g2ba:checkShipmentRegionalizationResponse", "g2ba:CheckShipmentRegionalizationResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::addBusinessEntityUserRequest(const char *endpoint, const char *soap_action, g2ba__AddBusinessEntityUserRequest *g2ba__addBusinessEntityUserRequest, g2ba__AddBusinessEntityUserResponse *g2ba__addBusinessEntityUserResponse)
{
	struct soap *soap = this;
	struct __g2b__addBusinessEntityUserRequest soap_tmp___g2b__addBusinessEntityUserRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "addBusinessEntityUserRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__addBusinessEntityUserRequest.g2ba__addBusinessEntityUserRequest = g2ba__addBusinessEntityUserRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__addBusinessEntityUserRequest(soap, &soap_tmp___g2b__addBusinessEntityUserRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__addBusinessEntityUserRequest(soap, &soap_tmp___g2b__addBusinessEntityUserRequest, "-g2b:addBusinessEntityUserRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__addBusinessEntityUserRequest(soap, &soap_tmp___g2b__addBusinessEntityUserRequest, "-g2b:addBusinessEntityUserRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__addBusinessEntityUserResponse)
		return soap_closesock(soap);
	g2ba__addBusinessEntityUserResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__addBusinessEntityUserResponse->soap_get(soap, "g2ba:addBusinessEntityUserResponse", "g2ba:AddBusinessEntityUserResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getBusinessEntityUserListRequest(const char *endpoint, const char *soap_action, g2ba__GetBusinessEntityUserListRequest *g2ba__getBusinessEntityUserListRequest, g2ba__GetBusinessEntityUserListResponse *g2ba__getBusinessEntityUserListResponse)
{
	struct soap *soap = this;
	struct __g2b__getBusinessEntityUserListRequest soap_tmp___g2b__getBusinessEntityUserListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getBusinessEntityUserListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getBusinessEntityUserListRequest.g2ba__getBusinessEntityUserListRequest = g2ba__getBusinessEntityUserListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getBusinessEntityUserListRequest(soap, &soap_tmp___g2b__getBusinessEntityUserListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getBusinessEntityUserListRequest(soap, &soap_tmp___g2b__getBusinessEntityUserListRequest, "-g2b:getBusinessEntityUserListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getBusinessEntityUserListRequest(soap, &soap_tmp___g2b__getBusinessEntityUserListRequest, "-g2b:getBusinessEntityUserListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getBusinessEntityUserListResponse)
		return soap_closesock(soap);
	g2ba__getBusinessEntityUserListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getBusinessEntityUserListResponse->soap_get(soap, "g2ba:getBusinessEntityUserListResponse", "g2ba:GetBusinessEntityUserListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getBusinessEntityUserRequest(const char *endpoint, const char *soap_action, g2ba__GetBusinessEntityUserRequest *g2ba__getBusinessEntityUserRequest, g2ba__GetBusinessEntityUserResponse *g2ba__getBusinessEntityUserResponse)
{
	struct soap *soap = this;
	struct __g2b__getBusinessEntityUserRequest soap_tmp___g2b__getBusinessEntityUserRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getBusinessEntityUserRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getBusinessEntityUserRequest.g2ba__getBusinessEntityUserRequest = g2ba__getBusinessEntityUserRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getBusinessEntityUserRequest(soap, &soap_tmp___g2b__getBusinessEntityUserRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getBusinessEntityUserRequest(soap, &soap_tmp___g2b__getBusinessEntityUserRequest, "-g2b:getBusinessEntityUserRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getBusinessEntityUserRequest(soap, &soap_tmp___g2b__getBusinessEntityUserRequest, "-g2b:getBusinessEntityUserRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getBusinessEntityUserResponse)
		return soap_closesock(soap);
	g2ba__getBusinessEntityUserResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getBusinessEntityUserResponse->soap_get(soap, "g2ba:getBusinessEntityUserResponse", "g2ba:GetBusinessEntityUserResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::updateUserAuthoritiesRequest(const char *endpoint, const char *soap_action, g2ba__UpdateUserAuthoritiesRequest *g2ba__updateUserAuthoritiesRequest, g2ba__UpdateUserAuthoritiesResponse *g2ba__updateUserAuthoritiesResponse)
{
	struct soap *soap = this;
	struct __g2b__updateUserAuthoritiesRequest soap_tmp___g2b__updateUserAuthoritiesRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "updateUserAuthoritiesRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__updateUserAuthoritiesRequest.g2ba__updateUserAuthoritiesRequest = g2ba__updateUserAuthoritiesRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__updateUserAuthoritiesRequest(soap, &soap_tmp___g2b__updateUserAuthoritiesRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__updateUserAuthoritiesRequest(soap, &soap_tmp___g2b__updateUserAuthoritiesRequest, "-g2b:updateUserAuthoritiesRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__updateUserAuthoritiesRequest(soap, &soap_tmp___g2b__updateUserAuthoritiesRequest, "-g2b:updateUserAuthoritiesRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__updateUserAuthoritiesResponse)
		return soap_closesock(soap);
	g2ba__updateUserAuthoritiesResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__updateUserAuthoritiesResponse->soap_get(soap, "g2ba:updateUserAuthoritiesResponse", "g2ba:UpdateUserAuthoritiesResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::updateUserWorkingAreasRequest(const char *endpoint, const char *soap_action, g2ba__UpdateUserWorkingAreasRequest *g2ba__updateUserWorkingAreasRequest, g2ba__UpdateUserWorkingAreasResponse *g2ba__updateUserWorkingAreasResponse)
{
	struct soap *soap = this;
	struct __g2b__updateUserWorkingAreasRequest soap_tmp___g2b__updateUserWorkingAreasRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "updateUserWorkingAreasRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__updateUserWorkingAreasRequest.g2ba__updateUserWorkingAreasRequest = g2ba__updateUserWorkingAreasRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__updateUserWorkingAreasRequest(soap, &soap_tmp___g2b__updateUserWorkingAreasRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__updateUserWorkingAreasRequest(soap, &soap_tmp___g2b__updateUserWorkingAreasRequest, "-g2b:updateUserWorkingAreasRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__updateUserWorkingAreasRequest(soap, &soap_tmp___g2b__updateUserWorkingAreasRequest, "-g2b:updateUserWorkingAreasRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__updateUserWorkingAreasResponse)
		return soap_closesock(soap);
	g2ba__updateUserWorkingAreasResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__updateUserWorkingAreasResponse->soap_get(soap, "g2ba:updateUserWorkingAreasResponse", "g2ba:UpdateUserWorkingAreasResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::unbindBusinessEntityUserRequest(const char *endpoint, const char *soap_action, g2ba__UnbindBusinessEntityUserRequest *g2ba__unbindBusinessEntityUserRequest, g2ba__UnbindBusinessEntityUserResponse *g2ba__unbindBusinessEntityUserResponse)
{
	struct soap *soap = this;
	struct __g2b__unbindBusinessEntityUserRequest soap_tmp___g2b__unbindBusinessEntityUserRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "unbindBusinessEntityUserRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__unbindBusinessEntityUserRequest.g2ba__unbindBusinessEntityUserRequest = g2ba__unbindBusinessEntityUserRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__unbindBusinessEntityUserRequest(soap, &soap_tmp___g2b__unbindBusinessEntityUserRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__unbindBusinessEntityUserRequest(soap, &soap_tmp___g2b__unbindBusinessEntityUserRequest, "-g2b:unbindBusinessEntityUserRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__unbindBusinessEntityUserRequest(soap, &soap_tmp___g2b__unbindBusinessEntityUserRequest, "-g2b:unbindBusinessEntityUserRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__unbindBusinessEntityUserResponse)
		return soap_closesock(soap);
	g2ba__unbindBusinessEntityUserResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__unbindBusinessEntityUserResponse->soap_get(soap, "g2ba:unbindBusinessEntityUserResponse", "g2ba:UnbindBusinessEntityUserResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int AMSMercuryG2BBindingProxy::getApplicableUserAuthorityListRequest(const char *endpoint, const char *soap_action, g2ba__GetApplicableUserAuthorityListRequest *g2ba__getApplicableUserAuthorityListRequest, g2ba__GetApplicableUserAuthorityListResponse *g2ba__getApplicableUserAuthorityListResponse)
{
	struct soap *soap = this;
	struct __g2b__getApplicableUserAuthorityListRequest soap_tmp___g2b__getApplicableUserAuthorityListRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_action, "getApplicableUserAuthorityListRequest");
	soap->encodingStyle = NULL;
	soap_tmp___g2b__getApplicableUserAuthorityListRequest.g2ba__getApplicableUserAuthorityListRequest = g2ba__getApplicableUserAuthorityListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___g2b__getApplicableUserAuthorityListRequest(soap, &soap_tmp___g2b__getApplicableUserAuthorityListRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___g2b__getApplicableUserAuthorityListRequest(soap, &soap_tmp___g2b__getApplicableUserAuthorityListRequest, "-g2b:getApplicableUserAuthorityListRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___g2b__getApplicableUserAuthorityListRequest(soap, &soap_tmp___g2b__getApplicableUserAuthorityListRequest, "-g2b:getApplicableUserAuthorityListRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!g2ba__getApplicableUserAuthorityListResponse)
		return soap_closesock(soap);
	g2ba__getApplicableUserAuthorityListResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	g2ba__getApplicableUserAuthorityListResponse->soap_get(soap, "g2ba:getApplicableUserAuthorityListResponse", "g2ba:GetApplicableUserAuthorityListResponse");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
