/* vetisamsApplicationManagementServiceBindingProxy.cpp
   Generated by gSOAP 2.8.8 from vetisams.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "vetisamsApplicationManagementServiceBindingProxy.h"

ApplicationManagementServiceBindingProxy::ApplicationManagementServiceBindingProxy()
{
	ApplicationManagementServiceBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ApplicationManagementServiceBindingProxy::ApplicationManagementServiceBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

ApplicationManagementServiceBindingProxy::ApplicationManagementServiceBindingProxy(const char *url)
{
	ApplicationManagementServiceBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ApplicationManagementServiceBindingProxy::ApplicationManagementServiceBindingProxy(soap_mode iomode)
{
	ApplicationManagementServiceBindingProxy_init(iomode, iomode);
}

ApplicationManagementServiceBindingProxy::ApplicationManagementServiceBindingProxy(const char *url, soap_mode iomode)
{
	ApplicationManagementServiceBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ApplicationManagementServiceBindingProxy::ApplicationManagementServiceBindingProxy(soap_mode imode, soap_mode omode)
{
	ApplicationManagementServiceBindingProxy_init(imode, omode);
}

ApplicationManagementServiceBindingProxy::~ApplicationManagementServiceBindingProxy()
{ }

void ApplicationManagementServiceBindingProxy::ApplicationManagementServiceBindingProxy_init(soap_mode imode, soap_mode omode)
{
	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"app", "http://api.vetrf.ru/schema/cdm/application", NULL, NULL},
	{"base", "http://api.vetrf.ru/schema/cdm/base", NULL, NULL},
	{"dic", "http://api.vetrf.ru/schema/cdm/dictionary/v2", NULL, NULL},
	{"vd", "http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2", NULL, NULL},
	{"ns2", "http://api.vetrf.ru/schema/cdm/base/ws-definitions", NULL, NULL},
	{"apps", "http://api.vetrf.ru/schema/cdm/application/service", NULL, NULL},
	{"ws", "http://api.vetrf.ru/schema/cdm/application/ws-definitions", NULL, NULL},
	{"g2b", "http://api.vetrf.ru/schema/cdm/mercury/g2b/service/v2", NULL, NULL},
	{"g2ba", "http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void ApplicationManagementServiceBindingProxy::destroy()
{
	soap_destroy(this);
	soap_end(this);
}

void ApplicationManagementServiceBindingProxy::reset()
{
	destroy();
	soap_done(this);
	soap_init(this);
	ApplicationManagementServiceBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ApplicationManagementServiceBindingProxy::soap_noheader()
{
	this->header = NULL;
}

const SOAP_ENV__Header *ApplicationManagementServiceBindingProxy::soap_header()
{
	return this->header;
}

const SOAP_ENV__Fault *ApplicationManagementServiceBindingProxy::soap_fault()
{
	return this->fault;
}

const char *ApplicationManagementServiceBindingProxy::soap_fault_string()
{
	return *soap_faultstring(this);
}

const char *ApplicationManagementServiceBindingProxy::soap_fault_detail()
{
	return *soap_faultdetail(this);
}

int ApplicationManagementServiceBindingProxy::soap_close_socket()
{
	return soap_closesock(this);
}

int ApplicationManagementServiceBindingProxy::soap_force_close_socket()
{
	return soap_force_closesock(this);
}

void ApplicationManagementServiceBindingProxy::soap_print_fault(FILE *fd)
{
	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ApplicationManagementServiceBindingProxy::soap_stream_fault(std::ostream& os)
{
	::soap_stream_fault(this, os);
}
#endif

char *ApplicationManagementServiceBindingProxy::soap_sprint_fault(char *buf, size_t len)
{
	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ApplicationManagementServiceBindingProxy::submitApplicationRequest(const char *endpoint, const char *soap_action, _ws__submitApplicationRequest *ws__submitApplicationRequest, _ws__submitApplicationResponse *ws__submitApplicationResponse)
{
	struct soap *soap = this;
	struct __apps__submitApplicationRequest soap_tmp___apps__submitApplicationRequest;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_endpoint, "https://api.vetrf.ru/platform/services/ApplicationManagementService");
	SETIFZ(soap_action, "submitApplicationRequest");
	soap->encodingStyle = NULL;
	soap_tmp___apps__submitApplicationRequest.ws__submitApplicationRequest = ws__submitApplicationRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apps__submitApplicationRequest(soap, &soap_tmp___apps__submitApplicationRequest);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apps__submitApplicationRequest(soap, &soap_tmp___apps__submitApplicationRequest, "-apps:submitApplicationRequest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apps__submitApplicationRequest(soap, &soap_tmp___apps__submitApplicationRequest, "-apps:submitApplicationRequest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!ws__submitApplicationResponse)
		return soap_closesock(soap);
	ws__submitApplicationResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ws__submitApplicationResponse->soap_get(soap, "ws:submitApplicationResponse", "");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ApplicationManagementServiceBindingProxy::receiveApplicationResult(const char *endpoint, const char *soap_action, _ws__receiveApplicationResultRequest *ws__receiveApplicationResultRequest, _ws__receiveApplicationResultResponse *ws__receiveApplicationResultResponse)
{
	struct soap *soap = this;
	struct __apps__receiveApplicationResult soap_tmp___apps__receiveApplicationResult;
	if(endpoint)
		soap_endpoint = endpoint;
	SETIFZ(soap_endpoint, "https://api.vetrf.ru/platform/services/ApplicationManagementService");
	SETIFZ(soap_action, "receiveApplicationResult");
	soap->encodingStyle = NULL;
	soap_tmp___apps__receiveApplicationResult.ws__receiveApplicationResultRequest = ws__receiveApplicationResultRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apps__receiveApplicationResult(soap, &soap_tmp___apps__receiveApplicationResult);
	if(soap_begin_count(soap))
		return soap->error;
	if(soap->mode & SOAP_IO_LENGTH) {
		if(soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apps__receiveApplicationResult(soap, &soap_tmp___apps__receiveApplicationResult, "-apps:receiveApplicationResult", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if(soap_end_count(soap))
		return soap->error;
	if(soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apps__receiveApplicationResult(soap, &soap_tmp___apps__receiveApplicationResult, "-apps:receiveApplicationResult", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if(!ws__receiveApplicationResultResponse)
		return soap_closesock(soap);
	ws__receiveApplicationResultResponse->soap_default(soap);
	if(soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ws__receiveApplicationResultResponse->soap_get(soap, "ws:receiveApplicationResultResponse", "");
	if(soap->error)
		return soap_recv_fault(soap, 0);
	if(soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
