/* DO NOT EDIT: automatically built by dist/s_include. */
#ifndef	_rep_ext_h_
#define	_rep_ext_h_

#if defined(__cplusplus)
extern "C" {
#endif

int __rep_bulk_marshal(ENV *, __rep_bulk_args *, uint8 *, size_t, size_t *);
int __rep_bulk_unmarshal(ENV *, __rep_bulk_args *, uint8 *, size_t, uint8 **);
int __rep_control_marshal(ENV *, __rep_control_args *, uint8 *, size_t, size_t *);
int __rep_control_unmarshal(ENV *, __rep_control_args *, uint8 *, size_t, uint8 **);
int __rep_egen_marshal(ENV *, __rep_egen_args *, uint8 *, size_t, size_t *);
int __rep_egen_unmarshal(ENV *, __rep_egen_args *, uint8 *, size_t, uint8 **);
int __rep_fileinfo_marshal(ENV *, __rep_fileinfo_args *, uint8 *, size_t, size_t *);
int __rep_fileinfo_unmarshal(ENV *, __rep_fileinfo_args **, uint8 *, size_t, uint8 **);
int __rep_fileinfo_v7_marshal(ENV *, __rep_fileinfo_v7_args *, uint8 *, size_t, size_t *);
int __rep_fileinfo_v7_unmarshal(ENV *, __rep_fileinfo_v7_args **, uint8 *, size_t, uint8 **);
int __rep_fileinfo_v6_marshal(ENV *, __rep_fileinfo_v6_args *, uint8 *, size_t, size_t *);
int __rep_fileinfo_v6_unmarshal(ENV *, __rep_fileinfo_v6_args **, uint8 *, size_t, uint8 **);
int __rep_grant_info_marshal(ENV *, __rep_grant_info_args *, uint8 *, size_t, size_t *);
int __rep_grant_info_unmarshal(ENV *, __rep_grant_info_args *, uint8 *, size_t, uint8 **);
int __rep_logreq_marshal(ENV *, __rep_logreq_args *, uint8 *, size_t, size_t *);
int __rep_logreq_unmarshal(ENV *, __rep_logreq_args *, uint8 *, size_t, uint8 **);
int __rep_newfile_marshal(ENV *, __rep_newfile_args *, uint8 *, size_t, size_t *);
int __rep_newfile_unmarshal(ENV *, __rep_newfile_args *, uint8 *, size_t, uint8 **);
int __rep_update_marshal(ENV *, __rep_update_args *, uint8 *, size_t, size_t *);
int __rep_update_unmarshal(ENV *, __rep_update_args **, uint8 *, size_t, uint8 **);
int __rep_vote_info_marshal(ENV *, __rep_vote_info_args *, uint8 *, size_t, size_t *);
int __rep_vote_info_unmarshal(ENV *, __rep_vote_info_args *, uint8 *, size_t, uint8 **);
int __rep_vote_info_v5_marshal(ENV *, __rep_vote_info_v5_args *, uint8 *, size_t, size_t *);
int __rep_vote_info_v5_unmarshal(ENV *, __rep_vote_info_v5_args *, uint8 *, size_t, uint8 **);
void __rep_lsn_hist_key_marshal(ENV *, __rep_lsn_hist_key_args *, uint8 *);
int __rep_lsn_hist_key_unmarshal(ENV *, __rep_lsn_hist_key_args *, uint8 *, size_t, uint8 **);
void __rep_lsn_hist_data_marshal(ENV *, __rep_lsn_hist_data_args *, uint8 *);
int __rep_lsn_hist_data_unmarshal(ENV *, __rep_lsn_hist_data_args *, uint8 *, size_t, uint8 **);
void __rep_blob_update_req_marshal(ENV *, __rep_blob_update_req_args *, uint8 *);
int __rep_blob_update_req_unmarshal(ENV *, __rep_blob_update_req_args *, uint8 *, size_t, uint8 **);
void __rep_blob_update_req_v8_marshal(ENV *, __rep_blob_update_req_v8_args *, uint8 *);
int __rep_blob_update_req_v8_unmarshal(ENV *, __rep_blob_update_req_v8_args *, uint8 *, size_t, uint8 **);
void __rep_blob_update_marshal(ENV *, __rep_blob_update_args *, uint8 *);
int __rep_blob_update_unmarshal(ENV *, __rep_blob_update_args *, uint8 *, size_t, uint8 **);
void __rep_blob_file_marshal(ENV *, __rep_blob_file_args *, uint8 *);
int __rep_blob_file_unmarshal(ENV *, __rep_blob_file_args *, uint8 *, size_t, uint8 **);
void __rep_blob_chunk_marshal(ENV *, __rep_blob_chunk_args *, uint8 *);
int __rep_blob_chunk_unmarshal(ENV *, __rep_blob_chunk_args *, uint8 *, size_t, uint8 **);
void __rep_blob_chunk_req_marshal(ENV *, __rep_blob_chunk_req_args *, uint8 *);
int __rep_blob_chunk_req_unmarshal(ENV *, __rep_blob_chunk_req_args *, uint8 *, size_t, uint8 **);
int __rep_update_req(ENV *, __rep_control_args *);
int __rep_blob_update_req(ENV *, int, DB_THREAD_INFO *, DBT *);
int __rep_page_req(ENV *, DB_THREAD_INFO *, int, __rep_control_args *, DBT *);
int __rep_update_setup(ENV *, int, __rep_control_args *, DBT *, time_t, DB_LSN *);
int __rep_blob_update(ENV *, int, DB_THREAD_INFO *, DBT *);
int __rep_blob_allreq(ENV *, int, DBT *);
int __rep_bulk_page(ENV *, DB_THREAD_INFO *, int, __rep_control_args *, DBT *);
int __rep_page(ENV *, DB_THREAD_INFO *, int, __rep_control_args *, DBT *);
int __rep_blob_chunk(ENV *, int, DB_THREAD_INFO *, DBT *);
int __rep_init_cleanup(ENV *, REP *, int);
int __rep_blob_chunk_req(ENV *, int, DBT *);
int __rep_pggap_req(ENV *, REP *, __rep_fileinfo_args *, uint32);
int __rep_blob_rereq(ENV *, REP *, uint32);
int __rep_finfo_alloc(ENV *, __rep_fileinfo_args *, __rep_fileinfo_args **);
int __rep_remove_init_file(ENV *);
int __rep_reset_init(ENV *);
int __rep_elect_pp(DB_ENV *, uint32, uint32, uint32);
int __rep_elect_int(ENV *, uint32, uint32, uint32);
int __rep_vote1(ENV *, __rep_control_args *, DBT *, int);
int __rep_vote2(ENV *, DBT *, int);
int __rep_update_grant(ENV *, db_timespec *);
int __rep_islease_granted(ENV *);
int __rep_lease_table_alloc(ENV *, uint32);
int __rep_lease_grant(ENV *, __rep_control_args *, DBT *, int);
int __rep_lease_check(ENV *, int);
int __rep_lease_refresh(ENV *);
int __rep_lease_expire(ENV *);
db_timeout_t __rep_lease_waittime(ENV *);
int __rep_allreq(ENV *, __rep_control_args *, int);
int __rep_log(ENV *, DB_THREAD_INFO *, __rep_control_args *, DBT *, int, time_t, DB_LSN *, DB_LSN *);
int __rep_bulk_log(ENV *, DB_THREAD_INFO *, __rep_control_args *, DBT *, time_t, DB_LSN *, DB_LSN *);
int __rep_logreq(ENV *, __rep_control_args *, DBT *, int);
int __rep_loggap_req(ENV *, REP *, DB_LSN *, uint32);
int __rep_logready(ENV *, REP *, time_t, DB_LSN *);
int __rep_env_create(DB_ENV *);
void __rep_env_destroy(DB_ENV *);
int __rep_get_config(DB_ENV *, uint32, int *);
int __rep_set_config(DB_ENV *, uint32, int);
int __rep_start_pp(DB_ENV *, DBT *, uint32);
int __rep_start_int(ENV *, DBT *, uint32, uint32);
int __rep_open_sysdb(ENV *, DB_THREAD_INFO *, DB_TXN *, const char *, uint32, DB **);
int __rep_client_dbinit(ENV *, int, repdb_t);
int  __rep_blob_cmp(DB *, const DBT *, const DBT *, size_t *);
int  __rep_offset_cmp(DB *, const DBT *, const DBT *, size_t *);
int __rep_get_limit(DB_ENV *, uint32 *, uint32 *);
int __rep_set_limit(DB_ENV *, uint32, uint32);
int __rep_set_nsites_pp(DB_ENV *, uint32);
int __rep_set_nsites_int(ENV *, uint32);
int __rep_get_nsites(DB_ENV *, uint32 *);
int __rep_set_priority_pp(DB_ENV *, uint32);
int __rep_set_priority_int(ENV *, uint32);
int __rep_get_priority(DB_ENV *, uint32 *);
int __rep_set_timeout_pp(DB_ENV *, int, db_timeout_t);
int __rep_set_timeout_int(ENV *, int, db_timeout_t);
int __rep_get_timeout(DB_ENV *, int, db_timeout_t *);
int __rep_get_request(DB_ENV *, db_timeout_t *, db_timeout_t *);
int __rep_set_request(DB_ENV *, db_timeout_t, db_timeout_t);
int __rep_set_view(DB_ENV *, int (*)(DB_ENV *, const char *, int *, uint32));
int __rep_call_partial(ENV *, const char *, int *, uint32, DELAYED_BLOB_LIST **);
int __rep_set_transport_pp(DB_ENV *, int, int (*)(DB_ENV *, const DBT *, const DBT *, const DB_LSN *, int, uint32));
int __rep_set_transport_int(ENV *, int, int (*)(DB_ENV *, const DBT *, const DBT *, const DB_LSN *, int, uint32));
int __rep_get_clockskew(DB_ENV *, uint32 *, uint32 *);
int __rep_set_clockskew(DB_ENV *, uint32, uint32);
int __rep_flush_pp(DB_ENV *);
int __rep_flush_int(ENV *);
int __rep_sync(DB_ENV *, uint32);
int __rep_txn_applied(ENV *, DB_THREAD_INFO *, DB_COMMIT_INFO *, db_timeout_t);
int __rep_read_lsn_history(ENV *, DB_THREAD_INFO *, DB_TXN **, DBC **, uint32, __rep_lsn_hist_data_args *, struct rep_waitgoal *, uint32, int);
int __rep_process_message_pp(DB_ENV *, DBT *, DBT *, int, DB_LSN *);
int __rep_process_message_int(ENV *, DBT *, DBT *, int, DB_LSN *, DB_LSN *);
int __rep_apply(ENV *, DB_THREAD_INFO *, __rep_control_args *, DBT *, DB_LSN *, int *, DB_LSN *, DB_LSN *);
int __rep_process_txn(ENV *, DBT *);
int __rep_resend_req(ENV *, int);
int __rep_check_doreq(ENV *, REP *);
int __rep_check_missing(ENV *, uint32, DB_LSN *);
int __rep_open(ENV *);
int __rep_close_diagfiles(ENV *);
int __rep_env_refresh(ENV *);
int __rep_env_close(ENV *);
int __rep_preclose(ENV *);
int __rep_closefiles(ENV *);
int __rep_write_egen(ENV *, REP *, uint32);
int __rep_write_gen(ENV *, REP *, uint32);
int __rep_check_view(ENV *);
int __rep_stat_pp(DB_ENV *, DB_REP_STAT **, uint32);
int __rep_stat_print_pp(DB_ENV *, uint32);
int __rep_stat_print(ENV *, uint32);
int __rep_bulk_message(ENV *, REP_BULK *, REP_THROTTLE *, DB_LSN *, const DBT *, uint32);
int __rep_send_bulk(ENV *, REP_BULK *, uint32);
int __rep_bulk_alloc(ENV *, REP_BULK *, int, uintptr_t *, uint32 *, uint32);
int __rep_bulk_free(ENV *, REP_BULK *, uint32);
int __rep_send_message(ENV *, int, uint32, DB_LSN *, const DBT *, uint32, uint32);
int __rep_new_master(ENV *, __rep_control_args *, int);
void __rep_elect_done(ENV *, REP *);
int __env_rep_enter(ENV *, int);
int __env_db_rep_exit(ENV *);
int FASTCALL __db_rep_enter(DB *, int, int, int);
int __op_handle_enter(ENV *);
int __op_rep_enter(ENV *, int, int);
int __op_rep_exit(ENV *);
int __archive_rep_enter(ENV *);
int __archive_rep_exit(ENV *);
int __rep_lockout_archive(ENV *, REP *);
int __rep_lockout_api(ENV *, REP *);
int __rep_take_apilockout(ENV *);
int __rep_clear_apilockout(ENV *);
int __rep_lockout_apply(ENV *, REP *, uint32);
int __rep_lockout_msg(ENV *, REP *, uint32);
int __rep_send_throttle(ENV *, int, REP_THROTTLE *, uint32, uint32);
uint32 __rep_msg_to_old(uint32, uint32);
uint32 __rep_msg_from_old(uint32, uint32);
int __rep_print_system(ENV *, uint32, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));
int __rep_print(ENV *, uint32, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));
void __rep_print_message(ENV *, int, __rep_control_args *, char *, uint32);
void __rep_fire_event(ENV *, uint32, void *);
void __rep_msg(const ENV *, const char *);
int __rep_notify_threads(ENV *, rep_waitreason_t);
int __rep_check_goal(ENV *, struct rep_waitgoal *);
int __rep_log_backup(ENV *, DB_LOGC *, DB_LSN *, uint32);
int __rep_get_maxpermlsn(ENV *, DB_LSN *);
int __rep_is_internal_rep_file(char *);
int __rep_get_datagen(ENV *, uint32 *);
int __rep_become_readonly_master(ENV *, uint32 *, DB_LSN *);
int __rep_get_lsnhist_data(ENV *, DB_THREAD_INFO *, uint32, __rep_lsn_hist_data_args *);
int __rep_verify(ENV *, __rep_control_args *, DBT *, int, time_t);
int __rep_verify_fail(ENV *, __rep_control_args *);
int __rep_verify_req(ENV *, __rep_control_args *, int);
int __rep_dorecovery(ENV *, DB_LSN *, DB_LSN *);
int __rep_verify_match(ENV *, DB_LSN *, time_t);

#if defined(__cplusplus)
}
#endif
#endif /* !_rep_ext_h_ */
