// SLCAIRO.H
// Copyright (c) A.Sobolev 2010, 2011, 2012, 2018, 2019
//
#ifndef __SLCAIRO_H // {
#define __SLCAIRO_H

typedef enum _cairo_status {
	CAIRO_STATUS_SUCCESS = 0,
	CAIRO_INT_STATUS_SUCCESS = 0,
	CAIRO_STATUS_NO_MEMORY,
	CAIRO_STATUS_INVALID_RESTORE,
	CAIRO_STATUS_INVALID_POP_GROUP,
	CAIRO_STATUS_NO_CURRENT_POINT,
	CAIRO_STATUS_INVALID_MATRIX,
	CAIRO_STATUS_INVALID_STATUS,
	CAIRO_STATUS_NULL_POINTER,
	CAIRO_STATUS_INVALID_STRING,
	CAIRO_STATUS_INVALID_PATH_DATA,
	CAIRO_STATUS_READ_ERROR,
	CAIRO_STATUS_WRITE_ERROR,
	CAIRO_STATUS_SURFACE_FINISHED,
	CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
	CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
	CAIRO_STATUS_INVALID_CONTENT,
	CAIRO_STATUS_INVALID_FORMAT,
	CAIRO_STATUS_INVALID_VISUAL,
	CAIRO_STATUS_FILE_NOT_FOUND,
	CAIRO_STATUS_INVALID_DASH,
	CAIRO_STATUS_INVALID_DSC_COMMENT,
	CAIRO_STATUS_INVALID_INDEX,
	CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
	CAIRO_STATUS_TEMP_FILE_ERROR,
	CAIRO_STATUS_INVALID_STRIDE,
	CAIRO_STATUS_FONT_TYPE_MISMATCH,
	CAIRO_STATUS_USER_FONT_IMMUTABLE,
	CAIRO_STATUS_USER_FONT_ERROR,
	CAIRO_STATUS_NEGATIVE_COUNT,
	CAIRO_STATUS_INVALID_CLUSTERS,
	CAIRO_STATUS_INVALID_SLANT,
	CAIRO_STATUS_INVALID_WEIGHT,
	CAIRO_STATUS_INVALID_SIZE,
	CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
	CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
	CAIRO_STATUS_DEVICE_ERROR,
	CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
	CAIRO_STATUS_DEVICE_FINISHED,
	CAIRO_STATUS_JBIG2_GLOBAL_MISSING,

    CAIRO_STATUS_PNG_ERROR, // 1.16.0
    CAIRO_STATUS_FREETYPE_ERROR, // 1.16.0
    CAIRO_STATUS_WIN32_GDI_ERROR, // 1.16.0
    CAIRO_STATUS_TAG_ERROR, // 1.16.0

	CAIRO_STATUS_LAST_STATUS,
	CAIRO_INT_STATUS_LAST_STATUS = CAIRO_STATUS_LAST_STATUS,
	//
	// cairo_int_status
	//
	CAIRO_INT_STATUS_UNSUPPORTED = 100,
	CAIRO_INT_STATUS_DEGENERATE,
	CAIRO_INT_STATUS_NOTHING_TO_DO,
	CAIRO_INT_STATUS_FLATTEN_TRANSPARENCY,
	CAIRO_INT_STATUS_IMAGE_FALLBACK,
	CAIRO_INT_STATUS_ANALYZE_RECORDING_SURFACE_PATTERN,
} cairo_status_t;

#if 0 // previos version

typedef enum _cairo_status {
	CAIRO_STATUS_SUCCESS = 0,

	CAIRO_STATUS_NO_MEMORY,
	CAIRO_STATUS_INVALID_RESTORE,
	CAIRO_STATUS_INVALID_POP_GROUP,
	CAIRO_STATUS_NO_CURRENT_POINT,
	CAIRO_STATUS_INVALID_MATRIX,
	CAIRO_STATUS_INVALID_STATUS,
	CAIRO_STATUS_NULL_POINTER,
	CAIRO_STATUS_INVALID_STRING,
	CAIRO_STATUS_INVALID_PATH_DATA,
	CAIRO_STATUS_READ_ERROR,
	CAIRO_STATUS_WRITE_ERROR,
	CAIRO_STATUS_SURFACE_FINISHED,
	CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
	CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
	CAIRO_STATUS_INVALID_CONTENT,
	CAIRO_STATUS_INVALID_FORMAT,
	CAIRO_STATUS_INVALID_VISUAL,
	CAIRO_STATUS_FILE_NOT_FOUND,
	CAIRO_STATUS_INVALID_DASH,
	CAIRO_STATUS_INVALID_DSC_COMMENT,
	CAIRO_STATUS_INVALID_INDEX,
	CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
	CAIRO_STATUS_TEMP_FILE_ERROR,
	CAIRO_STATUS_INVALID_STRIDE,
	CAIRO_STATUS_FONT_TYPE_MISMATCH,
	CAIRO_STATUS_USER_FONT_IMMUTABLE,
	CAIRO_STATUS_USER_FONT_ERROR,
	CAIRO_STATUS_NEGATIVE_COUNT,
	CAIRO_STATUS_INVALID_CLUSTERS,
	CAIRO_STATUS_INVALID_SLANT,
	CAIRO_STATUS_INVALID_WEIGHT,
	CAIRO_STATUS_INVALID_SIZE,
	CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
	CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
	CAIRO_STATUS_DEVICE_ERROR,
    CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
    CAIRO_STATUS_DEVICE_FINISHED,
	CAIRO_STATUS_JBIG2_GLOBAL_MISSING,

	CAIRO_STATUS_LAST_STATUS,
	//
	CAIRO_INT_STATUS_UNSUPPORTED = 100,
	CAIRO_INT_STATUS_DEGENERATE,
	CAIRO_INT_STATUS_NOTHING_TO_DO,
	CAIRO_INT_STATUS_FLATTEN_TRANSPARENCY,
	CAIRO_INT_STATUS_IMAGE_FALLBACK,
	CAIRO_INT_STATUS_ANALYZE_RECORDING_SURFACE_PATTERN,

	CAIRO_INT_STATUS_LAST_STATUS
} cairo_status_t;

#endif // } 0

typedef enum _cairo_status cairo_int_status_t;
//
//
//
typedef enum _cairo_surface_type {
	CAIRO_SURFACE_TYPE_IMAGE,
	CAIRO_SURFACE_TYPE_PDF,
	CAIRO_SURFACE_TYPE_PS,
	CAIRO_SURFACE_TYPE_XLIB,
	CAIRO_SURFACE_TYPE_XCB,
	CAIRO_SURFACE_TYPE_GLITZ,
	CAIRO_SURFACE_TYPE_QUARTZ,
	CAIRO_SURFACE_TYPE_WIN32,
	CAIRO_SURFACE_TYPE_BEOS,
	CAIRO_SURFACE_TYPE_DIRECTFB,
	CAIRO_SURFACE_TYPE_SVG,
	CAIRO_SURFACE_TYPE_OS2,
	CAIRO_SURFACE_TYPE_WIN32_PRINTING,
	CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
	CAIRO_SURFACE_TYPE_SCRIPT,
	CAIRO_SURFACE_TYPE_QT,
	CAIRO_SURFACE_TYPE_RECORDING,
	CAIRO_SURFACE_TYPE_VG,
	CAIRO_SURFACE_TYPE_GL,
	CAIRO_SURFACE_TYPE_DRM,
	CAIRO_SURFACE_TYPE_TEE,
	CAIRO_SURFACE_TYPE_XML,
	CAIRO_SURFACE_TYPE_SKIA,
	CAIRO_SURFACE_TYPE_SUBSURFACE,
	CAIRO_SURFACE_TYPE_COGL,

	CAIRO_INTERNAL_SURFACE_TYPE_SNAPSHOT = 0x1000,
	CAIRO_INTERNAL_SURFACE_TYPE_PAGINATED,
	CAIRO_INTERNAL_SURFACE_TYPE_ANALYSIS,
	CAIRO_INTERNAL_SURFACE_TYPE_OBSERVER,
	CAIRO_INTERNAL_SURFACE_TYPE_TEST_FALLBACK,
	CAIRO_INTERNAL_SURFACE_TYPE_TEST_PAGINATED,
	CAIRO_INTERNAL_SURFACE_TYPE_TEST_WRAPPING,
	CAIRO_INTERNAL_SURFACE_TYPE_NULL,
	CAIRO_INTERNAL_SURFACE_TYPE_TYPE3_GLYPH
} cairo_surface_type_t;

typedef enum _cairo_surface_type cairo_internal_surface_type_t;
//
//
//
typedef enum _cairo_scaled_glyph_info {
	CAIRO_SCALED_GLYPH_INFO_METRICS      = (1<<0),
	CAIRO_SCALED_GLYPH_INFO_SURFACE      = (1<<1),
	CAIRO_SCALED_GLYPH_INFO_PATH         = (1<<2),
	CAIRO_SCALED_GLYPH_INFO_RECORDING_SURFACE = (1<<3),
	CAIRO_SCALED_GLYPH_INFO_COLOR_SURFACE = (1 << 4) // 20180211
} cairo_scaled_glyph_info_t;
//
//
//
/**
 * cairo_content_t:
 * @CAIRO_CONTENT_COLOR: The surface will hold color content only.
 * @CAIRO_CONTENT_ALPHA: The surface will hold alpha content only.
 * @CAIRO_CONTENT_COLOR_ALPHA: The surface will hold color and alpha content.
 *
 * #cairo_content_t is used to describe the content that a surface will
 * contain, whether color information, alpha information (translucence
 * vs. opacity), or both.
 *
 * Note: The large values here are designed to keep #cairo_content_t
 * values distinct from #cairo_format_t values so that the
 * implementation can detect the error if users confuse the two types.
 **/
typedef enum _cairo_content {
	CAIRO_CONTENT_UNDEF         = 0, // @sobolev
	CAIRO_CONTENT_COLOR         = 0x1000, // The surface will hold color content only
	CAIRO_CONTENT_ALPHA         = 0x2000, // The surface will hold alpha content only
	CAIRO_CONTENT_COLOR_ALPHA   = 0x3000  // The surface will hold color and alpha content
} cairo_content_t;

#ifdef __cplusplus
	inline cairo_scaled_glyph_info_t operator | (cairo_scaled_glyph_info_t a, cairo_scaled_glyph_info_t b)
	{
		return static_cast<cairo_scaled_glyph_info_t>((static_cast<int>(a))|(static_cast<int>(b)));
	}
	inline cairo_content_t operator | (cairo_content_t a, cairo_content_t b)
	{
		return static_cast<cairo_content_t>((static_cast<int>(a))|(static_cast<int>(b)));
	}
#endif

#endif // } __SLCAIRO_H
