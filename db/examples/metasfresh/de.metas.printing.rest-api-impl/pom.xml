<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>de.metas.parent</artifactId>
		<groupId>de.metas</groupId>
		<version>10.0.0</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<version>10.0.0</version> <!-- needed by versions:set during the jenkins build -->
	<groupId>de.metas.printing</groupId>
	<artifactId>de.metas.printing.rest-api-impl</artifactId>
	<packaging>jar</packaging>

	<properties>
		<migration-sql-basedir></migration-sql-basedir>
		<metasfresh.version>[1,10.0.0]</metasfresh.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>de.metas.printing</groupId>
			<artifactId>de.metas.printing.api</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>

		<dependency>
			<groupId>de.metas.printing</groupId>
			<artifactId>de.metas.printing.base</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>

		<dependency>
			<groupId>de.metas.util</groupId>
			<artifactId>de.metas.util.web</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- see http://codecentric.github.io/spring-boot-admin/1.5.0/#client-applications -->
		<!-- 
		there are exclusions to avoid dependency version convergence issues
		(i.e. to satisfy the enforcer plugin)
		-->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<version>${spring-boot-admin.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<artifactId>spring-web</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
				<exclusion>
					<artifactId>spring-boot</artifactId>
					<groupId>org.springframework.boot</groupId>
				</exclusion>
				<exclusion>
					<artifactId>spring-boot-starter-web</artifactId>
					<groupId>org.springframework.boot</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>de.metas.adempiere.adempiere</groupId>
			<artifactId>de.metas.adempiere.adempiere.base</artifactId>
			<version>${metasfresh.version}</version>
			<classifier>tests</classifier>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>de.metas.printing</groupId>
			<artifactId>de.metas.printing.client</artifactId>
			<version>${metasfresh.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<finalName>metasfresh-print-service</finalName>
		<plugins>
			<!-- https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-git-info -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<executions>
					<execution>
						<id>spring-boot-serverRoot-create-executable-jar</id>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<!-- we *also* need the normal main jar to be use in app
							so don't replace the normal jar, but create the executable jar with this classifier -->
							<classifier>standalone</classifier>

							<executable>true</executable>
							<mainClass>${start-class}</mainClass>
							
							<!-- this also provides the super-jar to the successive docker build 
								Note that the ${docker.build.directory} property  is set by the prepare-docker profile 
								that is activated by the presence of the src/main/docker folder -->
							<outputDirectory>${docker.build.directory}</outputDirectory>
						</configuration>
					</execution>

					<execution>
						<id>spring-boot-serverRoot-build-info</id>
						<goals>
							<goal>build-info</goal> <!-- create build-info.properties; thanks to https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-build-info -->
						</goals>
						<configuration>
							<additionalProperties>
								<jenkinsBuildNo>${env.BUILD_NUMBER}</jenkinsBuildNo>
								<jenkinsBuildTag>${env.BUILD_TAG}</jenkinsBuildTag>
								<jenkinsBuildUrl>${env.BUILD_URL}</jenkinsBuildUrl>
								<jenkinsJobName>${env.JOB_NAME}</jenkinsJobName>
							</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>