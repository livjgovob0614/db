<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: cccc.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-1994
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33
 */

#include "Ctokens.h"
#include "AToken.h"

#define zzTRACE_RULES
#include "AParser.h"
#include "cccc.h"
#include "cccc_utl.h"
#include "cccc_opt.h"

  // the objects which PCCTS creates for ASTs as the #0 variable etc
// have type "pointer to ASTBase", which means they need to be cast
// to a pointer to my variant of AST if I want to call my AST 
// methods on them
#define MY_AST(X) ( (AST*) X)

  // we have a global variable member for the language of the parse so
// that we can supply the names of dialects (ansi_c, ansi_c++, mfc_c++ etc)
// for contexts where we wish to apply dialect-specific lexing or parsing
// rules
extern string parse_language;
>>

<<

#include <cassert>

// Need to see definition of CLexer class before defining the 
// next actions.
// This will mean this file is included twice in CLexer.cpp.  This
// should do no harm...
#include "CLexer.h"


// The lexical analyser passes some information through to
// the parse store to be integrated with parse information before
// recording in the database.
inline void IncrementCount(LexicalCount tc) 
{
	assert(ParseStore::currentInstance()!=NULL);
	ParseStore::currentInstance()->IncrementCount(tc);
}

inline void endOfLine(CLexer &lexer)
{
	assert(ParseStore::currentInstance()!=NULL);
	ParseStore::currentInstance()->endOfLine(lexer.line());
	lexer.newline();
	lexer.skip();
}

  
>>

%%START

@
	<<
		replstr("<EOF>");   
		return Eof;
	>>

[\ \t\r]+
	<<
		skip();   
		return WHITESPACE;
	>>

\r\n
	<<
		endOfLine(*this);   
		return DOS_NL;
	>>

\r
	<<
		endOfLine(*this);   
		return MAC_NL;
	>>

\n
	<<
		endOfLine(*this);   
		return UNIX_NL;
	>>

#
	<<
		mode(PREPROC); more();   
		return HASH;
	>>

//##
	<<
		mode(RR); skip();   
		return RR_DIRECTIVE;
	>>

//#
	<<
		mode(COMMENT_LINE); skip();   
		return COMDEF;
	>>

//
	<<
		mode(COMMENT_LINE); skip();   
		return COMLINE;
	>>

/\*
	<<
		mode(COMMENT_MULTI); skip();   
		return COMMULTI;
	>>

\"
	<<
		mode(CONST_STRING); skip();   
		return STRINGSTART;
	>>

\'
	<<
		mode(CONST_CHAR); skip();   
		return CHARSTART;
	>>

\{
	<<
		ANTLRToken::IncrementNesting();   
		return LBRACE;
	>>

\}
	<<
		ANTLRToken::DecrementNesting();   
		return RBRACE;
	>>

\(
	<<
		;   
		return LPAREN;
	>>

\)
	<<
		;   
		return RPAREN;
	>>

\[
	<<
		;   
		return LBRACK;
	>>

\]
	<<
		;   
		return RBRACK;
	>>

asm
	<<
		;   
		return ASM;
	>>

auto
	<<
		;   
		return AUTO;
	>>

break
	<<
		IncrementCount(tcMCCABES_VG);   
		return BREAK;
	>>

case
	<<
		;   
		return CASE;
	>>

catch
	<<
		;   
		return CATCH;
	>>

char
	<<
		;   
		return KW_CHAR;
	>>

class
	<<
		;   
		return CLASS;
	>>

const
	<<
		;   
		return KW_CONST;
	>>

continue
	<<
		;   
		return CONTINUE;
	>>

default
	<<
		;   
		return DEFAULT;
	>>

delete
	<<
		;   
		return DELETE;
	>>

do
	<<
		;   
		return DO;
	>>

double
	<<
		;   
		return KW_DOUBLE;
	>>

else
	<<
		;   
		return ELSE;
	>>

enum
	<<
		;   
		return ENUM;
	>>

extern
	<<
		;   
		return EXTERN;
	>>

float
	<<
		;   
		return KW_FLOAT;
	>>

for
	<<
		IncrementCount(tcMCCABES_VG);   
		return FOR;
	>>

friend
	<<
		;   
		return FRIEND;
	>>

goto
	<<
		;   
		return GOTO;
	>>

if
	<<
		IncrementCount(tcMCCABES_VG);   
		return IF;
	>>

inline
	<<
		;   
		return INLINE;
	>>

int
	<<
		;   
		return KW_INT;
	>>

long
	<<
		;   
		return KW_LONG;
	>>

new
	<<
		;   
		return NEW;
	>>

operator
	<<
		;   
		return OPERATOR;
	>>

private
	<<
		;   
		return PRIVATE;
	>>

protected
	<<
		;   
		return PROTECTED;
	>>

public
	<<
		;   
		return PUBLIC;
	>>

register
	<<
		;   
		return REGISTER;
	>>

return
	<<
		IncrementCount(tcMCCABES_VG);   
		return RETURN;
	>>

short
	<<
		;   
		return KW_SHORT;
	>>

signed
	<<
		;   
		return SIGNED;
	>>

sizeof
	<<
		;   
		return SIZEOF;
	>>

static
	<<
		;   
		return STATIC;
	>>

struct
	<<
		;   
		return STRUCT;
	>>

switch
	<<
		IncrementCount(tcMCCABES_VG);   
		return SWITCH;
	>>

template
	<<
		;   
		return TEMPLATE;
	>>

this
	<<
		;   
		return KW_THIS;
	>>

throw
	<<
		;   
		return THROW;
	>>

try
	<<
		;   
		return TRY;
	>>

typedef
	<<
		;   
		return TYPEDEF;
	>>

union
	<<
		;   
		return UNION;
	>>

unsigned
	<<
		;   
		return UNSIGNED;
	>>

virtual
	<<
		;   
		return VIRTUAL;
	>>

void
	<<
		;   
		return KW_VOID;
	>>

volatile
	<<
		;   
		return VOLATILE;
	>>

while
	<<
		IncrementCount(tcMCCABES_VG);   
		return WHILE;
	>>

==
	<<
		;   
		return (ANTLRTokenType)87;
	>>

!=
	<<
		;   
		return (ANTLRTokenType)88;
	>>

=
	<<
		;   
		return ASSIGN_OP;
	>>

\*=
	<<
		;   
		return (ANTLRTokenType)91;
	>>

\/=
	<<
		;   
		return (ANTLRTokenType)92;
	>>

%=
	<<
		;   
		return (ANTLRTokenType)93;
	>>

\+=
	<<
		;   
		return (ANTLRTokenType)94;
	>>

\-=
	<<
		;   
		return (ANTLRTokenType)95;
	>>

\>\>=
	<<
		;   
		return (ANTLRTokenType)96;
	>>

\<\<=
	<<
		;   
		return (ANTLRTokenType)97;
	>>

&=
	<<
		;   
		return (ANTLRTokenType)98;
	>>

\^=
	<<
		;   
		return (ANTLRTokenType)99;
	>>

\|=
	<<
		;   
		return (ANTLRTokenType)100;
	>>

\>\>
	<<
		;   
		return (ANTLRTokenType)102;
	>>

\<\<
	<<
		;   
		return (ANTLRTokenType)103;
	>>

\>
	<<
		;   
		return GREATERTHAN;
	>>

\<
	<<
		;   
		return LESSTHAN;
	>>

\>=
	<<
		;   
		return GREATEREQUAL;
	>>

\<=
	<<
		;   
		return LESSEQUAL;
	>>

\*
	<<
		;   
		return ASTERISK;
	>>

\/
	<<
		;   
		return (ANTLRTokenType)111;
	>>

%
	<<
		;   
		return (ANTLRTokenType)112;
	>>

\.\*
	<<
		;   
		return (ANTLRTokenType)114;
	>>

\-\>\*
	<<
		;   
		return (ANTLRTokenType)115;
	>>

\->\*
	<<
		return (ANTLRTokenType)117;
	>>

\+\+
	<<
		;   
		return (ANTLRTokenType)118;
	>>

\-\-
	<<
		;   
		return (ANTLRTokenType)119;
	>>

\+
	<<
		;   
		return (ANTLRTokenType)121;
	>>

\-
	<<
		;   
		return (ANTLRTokenType)122;
	>>

&&
	<<
		IncrementCount(tcMCCABES_VG);   
		return LOGICAL_AND_OP;
	>>

\|\|
	<<
		IncrementCount(tcMCCABES_VG);   
		return LOGICAL_OR_OP;
	>>

!
	<<
		;   
		return LOGICAL_NOT_OP;
	>>

?
	<<
		IncrementCount(tcMCCABES_VG);   
		return QUERY_OP;
	>>

&
	<<
		;   
		return AMPERSAND;
	>>

\|
	<<
		;   
		return PIPE;
	>>

\~
	<<
		;   
		return TILDA;
	>>

::
	<<
		;   
		return COLONCOLON;
	>>

\-\>
	<<
		;   
		return ARROW;
	>>

:
	<<
		;   
		return COLON;
	>>

\.
	<<
		;   
		return PERIOD;
	>>

,
	<<
		;   
		return COMMA;
	>>

;
	<<
		;   
		return SEMICOLON;
	>>

namespace
	<<
		;   
		return NAMESPACE;
	>>

using
	<<
		;   
		return USING;
	>>

and
	<<
		;   
		return AND;
	>>

and_eq
	<<
		;   
		return AND_EQ;
	>>

bitand
	<<
		;   
		return BITAND;
	>>

bitor
	<<
		;   
		return BITOR;
	>>

compl
	<<
		;   
		return COMPL;
	>>

not
	<<
		;   
		return NOT;
	>>

or
	<<
		;   
		return OR;
	>>

or_eq
	<<
		;   
		return OR_EQ;
	>>

xor
	<<
		;   
		return XOR;
	>>

xor_eq
	<<
		;   
		return XOR_EQ;
	>>

bool
	<<
		;   
		return KW_BOOL;
	>>

true
	<<
		;   
		return BTRUE;
	>>

false
	<<
		;   
		return BFALSE;
	>>

static_cast
	<<
		;   
		return STATIC_CAST;
	>>

reinterpret_cast
	<<
		;   
		return REINTERPRET_CAST;
	>>

const_cast
	<<
		;   
		return CONST_CAST;
	>>

dynamic_cast
	<<
		;   
		return DYNAMIC_CAST;
	>>

typeid
	<<
		;   
		return TYPEID;
	>>

XXXXXXXXXXXXXXXXXXXXXXXXXX
	<<
		;   
		return IMPLEMENTATION_KEYWORD;
	>>

[A-Za-z_][A-Za-z_0-9]*
	<<
		
		// Check whether there are any dialect-specific rules 
		// about the current token.
		std::string treatment = 
		CCCC_Options::dialectKeywordPolicy(parse_language,lextext());
		
	std::string toktext=lextext();
		if( treatment == "ignore" )
		{
			skip();
		}
		// Ultimately, the next two cases will need to be handled 
		// using a #lexclass or something similar, for the moment
		// we just try to skip the tokens themselves.
		else if ( treatment == "start_skipping" )
		{
			skip();
		}	
		else if ( treatment == "stop_skipping" ) 
		{
			skip();
		}
		return IDENTIFIER;
	>>

[0][0-7]*
	<<
		return OCT_NUM;
	>>

[0][0-7]*[Ll]
	<<
		return L_OCT_NUM;
	>>

[1-9][0-9]*
	<<
		return INT_NUM;
	>>

[1-9][0-9]*[Ll]
	<<
		return L_INT_NUM;
	>>

[0][Xx][0-9A-Fa-f]+
	<<
		return HEX_NUM;
	>>

[0][Xx][0-9A-Fa-f]+[Ll]
	<<
		return L_HEX_NUM;
	>>

([0-9]+.[0-9]+ | [0-9]+. | .[0-9]+ ) {[Ee]{[\+\-]}[0-9]+}
	<<
		return FNUM;
	>>

~[\{\}\[\]\(\)@]
	<<
		skip();   
		return ANYTHING;
	>>


%%PREPROC

@
	<<
		return Eof;
	>>

\r\n
	<<
		mode(START); endOfLine(*this);   
		return DOS_P_EOL;
	>>

\r
	<<
		mode(START); endOfLine(*this);   
		return MAC_P_EOL;
	>>

\n
	<<
		mode(START); endOfLine(*this);   
		return UNIX_P_EOL;
	>>

\\\n
	<<
		; skip();   
		return P_LINECONT;
	>>

~[\n]
	<<
		; more();   
		return P_ANYTHING;
	>>

/\*
	<<
		mode(COMMENT_MULTI); more(); skip();   
		return P_COMMULTI;
	>>


%%RR

@
	<<
		return Eof;
	>>

~[\n]
	<<
		skip();   
		return RR_ANYTHING;
	>>

\n
	<<
		mode(START); endOfLine(*this);   
		return RR_END;
	>>


%%COMMENT_LINE

@
	<<
		return Eof;
	>>

\n
	<<
		
		IncrementCount(tcCOMLINES); 
		endOfLine(*this);
		mode(START); 
		return COMLINE_END;
	>>

~[\n]
	<<
		skip();   
		return COMLINE_ANYTHING;
	>>


%%COMMENT_MULTI

@
	<<
		return Eof;
	>>

\*/
	<<
		
		IncrementCount(tcCOMLINES); 
		mode(START); 
		skip(); 
		return COMMULTI_END;
	>>

\n
	<<
		IncrementCount(tcCOMLINES); endOfLine(*this);   
		return COMMULTI_EOL;
	>>

~[\n]
	<<
		skip();   
		return COMMULTI_ANYTHING;
	>>


%%CONST_STRING

@
	<<
		return Eof;
	>>

\"
	<<
		mode(START);   
		return STRINGCONST;
	>>

\\\n
	<<
		endOfLine(*this);   
		return LYNNS_FIX;
	>>

\\\"
	<<
		skip();   
		return ESCAPED_DQUOTE;
	>>

\\~[\"]
	<<
		skip();   
		return ESCAPED_OTHER;
	>>

~[\"]
	<<
		skip();   
		return S_ANYTHING;
	>>


%%CONST_CHAR

@
	<<
		return Eof;
	>>

'
	<<
		replstr("'.'"); mode(START);   
		return CHARCONST;
	>>

~[']
	<<
		skip();   
		return CH_ANYTHING;
	>>

%%
