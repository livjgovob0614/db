// OFD.CPP
// Copyright (c) A.Sobolev 2016, 2018
//
#include <pp.h>
#pragma hdrstop

#define OFDDT_REPREGISTER     1 // Отчёт о регистрации (datalen=658)
#define OFDDT_REPSESSOPEN     2 // * Отчёт об открытии смены (datalen=440)
#define OFDDT_CCHECK          3 // * Кассовый чек (datalen=32768)
#define OFDDT_REPBLANQ        4 // Бланк строгой отчетности (datalen=32768)
#define OFDDT_REPSESSCLOSE    5 // * Отчёт о закрытии смены (datalen=441)
#define OFDDT_REPFACCUMCLOSE  6 // Отчёт о закрытии фискального накопителя (datalen=432)
#define OFDDT_OPERACK         7 // Подтверждение оператора (datalen=512)
#define OFDDT_REPPARAMUPD    11 // Отчёт об изменении параметров регистрации (datalen=658)
#define OFDDT_REPCSTATE      21 // Отчёт о текущем состоянии расчетов (datalen=32768)
#define OFDDT_CCHECKCORR     31 // * Кассовый чек коррекции (datalen=32768)
#define OFDDT_REPBLANQCORR   41 // Бланк строгой отчетности коррекции (datalen=32768)

/*
Тэг Наименование реквизита Примечание
1001 автоматический режим
1002 автономный режим
1003 адрес банковского агента для банковских агентов
1004 адрес для банковского субагента для банковских агентов
1005 адрес оператора по переводу денежных средств для банковских агентов
1006 адрес платежного агента для платежных агентов
1007 адрес платежного субагента для платежных агентов
1008 адрес покупателя
1009 адрес (место) расчетов
1010 размер вознаграждения банковского агента (субагента) для банковских агентов
1011 размер вознаграждения платежного агента (субагента) для платежных агентов
1012 дата, время
1013 заводской номер ККТ
1014 значение типа строка
1015 значение типа целое
1016 ИНН оператора по переводу денежных средств для банковских агентов
1017 ИНН ОФД
1018 ИНН пользователя
1019 информационное cообщение
1020 ИТОГ
1021 кассир
1022 код ответа ОФД
1023 количество
1024 наименование банковского агента для банковских агентов
1025 наименование банковского субагента для банковских агентов
1026 наименование оператора по переводу денежных средств для банковских агентов
1027 наименование платежного агента для платежных агентов
1028 наименование платежного субагента для платежных агентов
1029 наименование реквизита
1030 наименование товара
1031 форма расчета – наличными
1032 налог
1033 налоги
1034 наценка (ставка)
1035 наценка (сумма)
1036 номер автомата
1037 регистрационный номер ККТ
1038 номер смены
1039 зарезервирован
1040 порядковый номер фискального документа
1041 заводской номер фискального накопителя
1042 номер чека за смену применяется единая нумерация : для кассовых чеков (БСО) и кассовых чеков (БСО) коррекции
1043 общая стоимость позиции с учетом скидок и наценок
1044 операция банковского агента для банковских агентов
1045 операция банковского субагента для банковских агентов
1046 ОФД
1047 параметр настройки
1048 наименование пользователя
1049 почтовый индекс
1050 признак исчерпания ресурса ФН
1051 признак необходимости срочной замены ФН
1052 признак переполнения памяти ФН
1053 признак превышения времени ожидания ответа ОФД
1054 признак расчета
1055 применяемая система налогообложения : для чека
1056 признак шифрования
1057 применение платежными агентами (субагентами)
1058 применение банковскими агентами (субагентами)
1059 наименование товара (реквизиты)
1060 сайт налогового органа
1061 сайт ОФД
1062 системы налогообложения : для регистрации
1063 скидка (ставка)
1064 скидка (сумма)
1065 сокращенное наименование налога
1066 сообщение
1067 сообщение оператора для ККТ
1068 сообщение оператора для ФН
1069 сообщение оператору
1070 ставка налога
1071 сторно товара (реквизиты) : запрещается применение реквизита «сторно» в кассовых чеках (БСО), где отсутствует хотя бы один реквизит «наименование товара»
1072 сумма налога
1073 телефон банковского агента : для банковских агентов
1074 телефон платежного агента : для платежных агентов
1075 телефон оператора по переводу денежных средств : для банковских агентов
1076 тип сообщения
1077 фискальный признак документа
1078 фискальный признак оператора
1079 цена за единицу
1080 штриховой код EAN13
1081 форма расчета – электронными
1082 телефон банковского субагента
1083 телефон платежного субагента : для банковских агентов
1084 дополнительный реквизит : для платежных агентов
1085 наименование дополнительного реквизита
1086 значение дополнительного реквизита
1087 Итог смены
1088 приход наличными
1089 приход электронными
1090 возврат прихода наличными
1091 возврат прихода электронными
1092 расход наличными
1093 расход электронными
1094 возврат расхода наличными
1095 возврат расхода электронными
1096 номер корректируемого фискального документа
1097 количество непереданных документов ФД
1098 дата и время первого из непереданных ФД
1099 сводный итог
1100 номер предписания
1101 код причины перерегистрации
1102 НДС итога чека со ставкой 18% : значение реквизита - Сумма рассчитанного налога
1103 НДС итога чека со ставкой 10% : сумма рассчитанного налога
1104 НДС итога чека со ставкой 0% : сумма (часть итога) к которой применяется ставка 0
1105 НДС не облагается : сумма (часть итога) к которой не применяется НДС
1106 НДС итога чека с рассчитанной ставкой 18% : значение реквизита - Сумма рассчитанного налога
1107 НДС итога чека с рассчитанной ставкой 10% : значение реквизита - Сумма рассчитанного налога
1108 признак расчетов в сети Интернет
1109 признак работы в сфере услуг
1110 применяется для формирования БСО
1111 количество фискальных документов за смену
1112 скидка/наценка
1113 наименование скидки
1114 наименование наценки
1115 адрес сайта для проверки ФП
1116 номер первого непереданного документа
1117 адрес отправителя
1118 количество кассовых чеков за смену
1119 телефон оператора по приему платежей
*/

class OfdBuffer : public SBuffer {
public:
	SLAPI  OfdBuffer();
	int    SLAPI StartPacket(int ofddt);
    int    SLAPI PutTagU8(int tag, uint8 v);
    int    SLAPI PutTagI16(int tag, int16 v);
    int    SLAPI PutTagI32(int tag, int32 v);
    int    SLAPI PutTagVLN(int tag, uint32 v);
    int    SLAPI PutTagFVLN(int tag, size_t maxLen, double v, int prec);
    int    SLAPI PutTagString(int tag, size_t maxLen, const char * pV);
    int    SLAPI PutTagStringFix(int tag, size_t maxLen, const char * pV);
};

SLAPI OfdBuffer::OfdBuffer() : SBuffer()
{
}

int SLAPI OfdBuffer::StartPacket(int ofddt)
{
	int    ok = 1;
	int16  _t = ofddt;
	THROW_SL(Z().Write(_t));
    CATCHZOK
    return ok;
}

int SLAPI OfdBuffer::PutTagU8(int tag, uint8 v)
{
    int    ok = 1;
    int16  _t = tag;
    int16  _s = sizeof(_t);
    THROW_SL(Write(_t));
    THROW_SL(Write(_s));
    THROW_SL(Write(v));
    CATCHZOK
    return ok;
}

int SLAPI OfdBuffer::PutTagI16(int tag, int16 v)
{
    int    ok = 1;
    int16  _t = tag;
    int16  _s = sizeof(_t);
    THROW_SL(Write(_t));
    THROW_SL(Write(_s));
    THROW_SL(Write(v));
    CATCHZOK
    return ok;
}

int SLAPI OfdBuffer::PutTagI32(int tag, int32 v)
{
    int    ok = 1;
    int16  _t = tag;
    int16  _s = sizeof(_t);
    THROW_SL(Write(_t));
    THROW_SL(Write(_s));
    THROW_SL(Write(v));
    CATCHZOK
    return ok;
}

int SLAPI OfdBuffer::PutTagVLN(int tag, uint32 v)
{
	return 0; // @construction
}

int SLAPI OfdBuffer::PutTagFVLN(int tag, size_t maxLen, double v, int prec)
{
	return 0; // @construction
}

int SLAPI OfdBuffer::PutTagString(int tag, size_t maxLen, const char * pV)
{
    int    ok = 1;
	const  size_t _sl = sstrlen(pV);
	assert(_sl <= 0x7fff);
    int16  _t = tag;
    int16  _s = (int16)_sl;
    SETMIN(_s, (int16)maxLen);
    THROW_SL(Write(_t));
    THROW_SL(Write(_s));
    THROW_SL(Write(pV, _s));
    CATCHZOK
    return ok;
}

int SLAPI OfdBuffer::PutTagStringFix(int tag, size_t maxLen, const char * pV)
{
    int    ok = 1;
    SString temp_buf = pV;
    temp_buf.Strip().Trim(maxLen).Align(maxLen, ADJ_LEFT);
    assert(temp_buf.Len() == maxLen);
    int16  _t = tag;
    int16  _s = (int16)temp_buf.Len();
    THROW_SL(Write(_t));
    THROW_SL(Write(_s));
    THROW_SL(Write(temp_buf.ucptr(), _s));
    CATCHZOK
    return ok;
}

