<%-- ---------------------------------------------------------------------- --%>
<%-- JAVA IMPORTS															--%>
<%-- ---------------------------------------------------------------------- --%>

<!-- this imports are used for language controls  -->
<%@page import="it.eng.spago.security.IEngUserProfile"%>
<%@page import="org.apache.commons.lang.StringEscapeUtils"%>
<%@ page language="java" 
	     contentType="text/html; charset=UTF-8" 
	     pageEncoding="UTF-8"%>	


<%-- ---------------------------------------------------------------------- --%>
<%-- JAVA IMPORTS															--%>
<%-- ---------------------------------------------------------------------- --%>
<%@page import="java.util.Locale"%>
<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.Map"%>
<%@page import="it.eng.spagobi.engines.georeport.GeoReportEngineInstance"%>
<%@page import="it.eng.spagobi.utilities.engines.EngineConstants"%>
<%@page import="java.util.Iterator"%>
<%@page import="it.eng.spagobi.commons.constants.SpagoBIConstants"%>
<%@page import="java.util.HashMap"%>
<%@page import="org.json.JSONObject"%>
<%@page import="org.json.JSONArray"%>
<%@page import="it.eng.spagobi.commons.ParameterValuesDecoder"%>
<%@page import="it.eng.spago.security.IEngUserProfile"%>
<%@page import="it.eng.spagobi.commons.bo.UserProfile"%>
<%@page import="it.eng.knowage.commons.utilities.urls.UrlBuilder"%>

<%-- ---------------------------------------------------------------------- --%>
<%-- JAVA CODE 																--%>
<%-- ---------------------------------------------------------------------- --%>
<% 
 
	//Dynamic Url Builder - Caching Management
	String knowageContext = GeneralUtilities.getSpagoBiContext();       			//  /knowage
	String georeportEngineContext = request.getContextPath();         				//  /georeportengine
	UrlBuilder urlBuilder = new UrlBuilder(knowageContext, georeportEngineContext);
	String dynamicResourcesBasePath = urlBuilder.getDynamicResorucesBasePath();     //  /knowage/js/src
	String dynamicResourcesEnginePath = urlBuilder.getDynamicResourcesEnginePath(); //  /georeportengine/js/src
	
	GeoReportEngineInstance engineInstance;
	Map env;
	String executionRole;
	Locale locale;
	String template;
	String docLabel;
	String docVersion;
	String docAuthor;
	String docName;
	String docDescription;
	String docIsPublic;
	String docIsVisible;
	String docPreviewFile;
	String[] docCommunities;
	String docCommunity;
	List docFunctionalities;
	String docDatasetLabel;
	String userId;
	List<String> includes;
	boolean visibleDataSet;

	engineInstance = (GeoReportEngineInstance)request.getSession().getAttribute(EngineConstants.ENGINE_INSTANCE);
	env = engineInstance.getEnv();
	locale = engineInstance.getLocale();

	IEngUserProfile profile= engineInstance.getUserProfile();
	executionRole = (String)env.get(EngineConstants.ENV_EXECUTION_ROLE);
	userId = (engineInstance.getDocumentUser()==null)?"":engineInstance.getDocumentUser().toString();
	template = engineInstance.getGuiSettings().toString();
	docLabel = (engineInstance.getDocumentLabel()==null)?"":engineInstance.getDocumentLabel().toString();
	docVersion = (engineInstance.getDocumentVersion()==null)?"":engineInstance.getDocumentVersion().toString();
	docAuthor = (engineInstance.getDocumentAuthor()==null)?"":engineInstance.getDocumentAuthor().toString();
	docName = (engineInstance.getDocumentName()==null)?"":engineInstance.getDocumentName().toString();
	docDescription = (engineInstance.getDocumentDescription()==null)?"":engineInstance.getDocumentDescription().toString();
	docIsPublic= (engineInstance.getDocumentIsPublic()==null)?"":engineInstance.getDocumentIsPublic().toString();
	docIsVisible= (engineInstance.getDocumentIsVisible()==null)?"":engineInstance.getDocumentIsVisible().toString();
	docPreviewFile= (engineInstance.getDocumentPreviewFile()==null)?"":engineInstance.getDocumentPreviewFile().toString();	
	docDatasetLabel = (engineInstance.getDataSet()==null)?"":engineInstance.getDataSet().getLabel();
	String docDatasetName = (engineInstance.getDataSet()==null)?"":engineInstance.getDataSet().getName();
	docCommunities= (engineInstance.getDocumentCommunities()==null)?null:engineInstance.getDocumentCommunities();
	docCommunity = (docCommunities == null || docCommunities.length == 0) ? "": docCommunities[0];
	docFunctionalities= (engineInstance.getDocumentFunctionalities()==null)?new ArrayList():engineInstance.getDocumentFunctionalities();
	visibleDataSet = (engineInstance.isVisibleDataSet());
   
	
	includes = engineInstance.getIncludes();
	
    // gets analytical driver
    Map analyticalDrivers  = engineInstance.getAnalyticalDrivers();

    ParameterValuesDecoder pvd=new ParameterValuesDecoder();
    Map driverParamsMap = new HashMap();
	for(Object key : engineInstance.getAnalyticalDrivers().keySet()){
		if(key instanceof String && !key.equals("widgetData")){
			String value = request.getParameter((String)key);
			if(value!=null && value != "null"){
				if ( key.equals("DOCUMENT_OUTPUT_PARAMETERS") ) //just for output parameters manage them as a json array list and not a simple string
					driverParamsMap.put(key, new JSONArray(value.toString()));	
				else
					driverParamsMap.put(key, pvd.decode(value.toString()));	
			}
		}
	}
	String driverParams = new JSONObject(driverParamsMap).toString(0);

	
	String editMode = request.getParameter("EDIT_MODE");
	String isUserTechnical = request.getParameter("IS_TECHNICAL_USER");
	String datasetLabel = request.getParameter("DATASET_LABEL");
	
%>


<%@include file="../../commons/includeMessageResource.jspf"%>

		
		
