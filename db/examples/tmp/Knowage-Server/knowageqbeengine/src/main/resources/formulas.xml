<?xml version="1.0"?>
<formulas>
	<formula >
		<name>Sum</name>
		<syntax>Sum( Field )</syntax>
			<body>Sum(field)</body>
			<argument>
				<name>Field</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Field type Number</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns the total sum of a numeric field.
		</description>
		<type>aggregation</type>
	</formula>
	
	<formula >
		<name>Min</name>
		<syntax>Min( Field )</syntax>
			<body>Min(field)</body>
			<argument>
				<name>Field</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Field type Number</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns the smallest value of a numeric field.
		</description>
		<type>aggregation</type>
	</formula>
	
	<formula >
		<name>Max</name>
		<syntax>MAx( Field )</syntax>
			<body>Max(field)</body>
			<argument>
				<name>Field</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Field type Number</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns the largest value of a numeric field.
		</description>
		<type>aggregation</type>
	</formula>
	
	<formula >
		<name>Count</name>
		<syntax>Count( Field )</syntax>
			<body>Count(field)</body>
			<argument>
				<name>Field</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Field of any type or *</argument_description>
			</argument>
			
		<output>Integer</output>
		<description>
			Returns the number of rows that matches the specific criteria.
		</description>
		<type>aggregation</type>
	</formula>
	
	<formula >
		<name>Average</name>
		<syntax>Avg( Field )</syntax>
			<body>Avg(field)</body>
			<argument>
				<name>Field</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Field type Number</argument_description>
			</argument>
			
		<output>Number</output>
		<description>
			Returns the average value of a numeric field.
		</description>
		<type>aggregation</type>
	</formula>
	
	<formula >
		<name>Concat</name>
		<syntax>Concat(expression1, expression2, expression3,...)</syntax>
			<body>Concat(expressionParams)</body>
			<argument>
				<name>Expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Expression than returns string</argument_description>
			</argument>
			
		<output>String</output>
		<description>
			If expression is a numeric value, it will be converted to a binary string. 
			If all expressions are nonbinary strings, this function will return a nonbinary string. 
			If any of the expressions is a binary string, this function will return a binary string. 
			If any of the expressions is a NULL, this function will return a NULL value..
		</description>
		<type>string</type>
	</formula>
	
	<formula >
		<name>Length</name>
		<syntax>Length(string)</syntax>
			<body>Length(string)</body>
			<argument>
				<name>String</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Expression than returns string</argument_description>
			</argument>
			
		<output>String</output>
		<description>
			Returns a length of a string
		</description>
		<type>string</type>
	</formula>
	
	<formula >
		<name>Locate</name>
		<syntax>Locate(substring, string, start)</syntax>
			<body>Locate(${substring}, ${string}, ${start})</body>
			<argument>
				<name>Substring</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Substring to search in a string</argument_description>
				<placeholder>substring</placeholder>
				<type>string</type>
			</argument>
			<argument>
				<name>String</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>String that will be searched</argument_description>
				<placeholder>string</placeholder>
				<type>string</type>
			</argument>
			<argument>
				<name>Start</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>The starting position for the search.Position 1 is default</argument_description>
				<placeholder>start</placeholder>
				<type>int</type>
			</argument>
			
		<output>Integer</output>
		<description>
			Returns a position of a subtring in the string
		</description>
		<type>string</type>
	</formula>
	
	
	
	<formula >
		<name>Lower</name>
		<syntax>Lower(string)</syntax>
			<body>Lower(string)</body>
			<argument>
				<name>String</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Expression than returns string</argument_description>
			</argument>
			
		<output>String</output>
		<description>
			Convert the string value to lower case.
		</description>
		<type>string</type>
	</formula>
	
	<formula >
		<name>Upper</name>
		<syntax>Upper(string)</syntax>
			<body>Upper(string)</body>
			<argument>
				<name>String</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Expression than returns string</argument_description>
			</argument>
			
		<output>String</output>
		<description>
			Convert the string value to upper case.
		</description>
		<type>string</type>
	</formula>
	
	<formula >
		<name>Trim</name>
		<syntax>Trim(string)</syntax>
			<body>Trim(string)</body>
			<argument>
				<name>String</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>Expression than returns string</argument_description>
			</argument>
			
		<output>String</output>
		<description>
			The TRIM function trims the specified character from a string. 
			The keywords LEADING, TRAILING, BOTH are all optional, if not specified BOTH is assumed. 
			If the char to be trimmed is not specified, it will be assumed to be space (or blank). 
		</description>
		<type>string</type>
	</formula>
	
	<formula >
		<name>Substring</name>
		<syntax>Substring(string, start_pos, number_of_chars))</syntax>
			<body>Substring(${string}, ${start_pos}, ${number_of_chars})</body>
			<argument>
				<name>String</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>String to extract from</argument_description>
				<placeholder>string</placeholder>
			</argument>
			<argument>
				<name>Start positions</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>The position to start extraction from. The first position in string is 1</argument_description>
				<placeholder>start_pos</placeholder>
			</argument>
			<argument>
				<name>Number of chars</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>The number of characters to extract</argument_description>
				<placeholder>number_of_chars</placeholder>
			</argument>
			
		<output>String</output>
		<description>
			Returns a substring of a string.
		</description>
		<type>string</type>
	</formula>
	
	<formula >
		<name>Current date</name>
		<syntax>CURRENT_DATE()</syntax>
			<body>CURRENT_DATE()</body>
			
		<output>String</output>
		<description>
			Returns the current date on the database
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>Current time</name>
		<syntax>CURRENT_TIME()</syntax>
			<body>CURRENT_TIME()</body>
			
		<output>String</output>
		<description>
			Returns the current time on the database
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>Hour</name>
		<syntax>Hour( Datetime_expression )</syntax>
			<body>Hour(datetime_expression)</body>
			<argument>
				<name>datetime_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>datetime expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns the hour part for a given date.
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>Second</name>
		<syntax>Second( Datetime_expression )</syntax>
			<body>Second(datetime_expression)</body>
			<argument>
				<name>datetime_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>datetime expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns  the seconds part of a time/datetime . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>Year</name>
		<syntax>Year( Date_expression )</syntax>
			<body>Year(date_expression)</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns  the year part for a given date  . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>Month</name>
		<syntax>Month( Date_expression )</syntax>
			<body>Month(date_expression)</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns  the month part for a given date  . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>Day</name>
		<syntax>Day( Date_expression )</syntax>
			<body>Day(date_expression)</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns  the day part for a given date  . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>get_quarter</name>
		<syntax>get_quarter( Date_expression )</syntax>
			<body>get_quarter(date_expression)</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Returns quarter number for a given date  . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>get_week</name>
		<syntax>get_week( Date_expression )</syntax>
			<body>get_week(date_expression)</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			Return the number of the week of the year . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>get_day_of_the_week</name>
		<syntax>get_day_of_the_week( Date_expression )</syntax>
			<body>get_day_of_the_week(date_expression)</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
			</argument>
			
			
		
		<output>Number</output>
		<description>
			 Return the name of the day . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>add_days</name>
		<syntax>add_days( Date_expression ,number_of_days)</syntax>
			<body>add_days(${date_expression},${number_of_days})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_days</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date number_of_days</argument_description>
				<placeholder>number_of_days</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns addition of date and number of days . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>add_hours</name>
		<syntax>add_hours( Date_expression ,number_of_hours)</syntax>
			<body>add_hours(${date_expression},${number_of_hours})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_hours</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>number_of_hours</argument_description>
				<placeholder>number_of_hours</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns addition of date and number of hours . 
		</description>
		<type>time</type>
	</formula>
	<formula >
		<name>add_months</name>
		<syntax>add_months( Date_expression ,number_of_months)</syntax>
			<body>add_months(${date_expression},${number_of_months})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_months</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>number_of_months</argument_description>
				<placeholder>number_of_months</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns addition of date and number of months . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>add_years</name>
		<syntax>add_years( Date_expression ,number_of_years)</syntax>
			<body>add_years(${date_expression},${number_of_years})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_years</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>number_of_years</argument_description>
				<placeholder>number_of_years</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns addition of date and number of years . 
		</description>
		<type>time</type>
	</formula>
	
	
	
	<formula >
		<name>subtract_days</name>
		<syntax>subtract_days( Date_expression ,number_of_days)</syntax>
			<body>subtract_days(${date_expression},${number_of_days})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_days</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date number_of_days</argument_description>
				<placeholder>number_of_days</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns subtraction of date and number of days . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>subtract_hours</name>
		<syntax>subtract_hours( Date_expression ,number_of_hours)</syntax>
			<body>subtract_hours(${date_expression},${number_of_hours})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_hours</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>number_of_hours</argument_description>
				<placeholder>number_of_hours</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns subtraction of date and number of hours . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>subtract_months</name>
		<syntax>subtract_months( Date_expression ,number_of_months)</syntax>
			<body>subtract_months(${date_expression},${number_of_months})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_months</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>number_of_months</argument_description>
				<placeholder>number_of_months</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns subtraction of date and number of months . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>subtract_years</name>
		<syntax>subtract_years( Date_expression ,number_of_years)</syntax>
			<body>subtract_years(${date_expression},${number_of_years})</body>
			<argument>
				<name>date_expression</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>date expression</argument_description>
				<placeholder>date_expression</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>number_of_years</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>number_of_years</argument_description>
				<placeholder>number_of_years</placeholder>
				<type>int</type>
			</argument>
			
			
		
		<output>date</output>
		<description>
			 Returns subtraction of date and number of years . 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>datediff_in_days</name>
		<syntax>datediff_in_days( Starting_date ,Ending_date)</syntax>
			<body>datediff_in_days(${starting_date},${ending_date})</body>
			<argument>
				<name>starting_date</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>starting date</argument_description>
				<placeholder>starting_date</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>ending_date</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>ending_date</argument_description>
				<placeholder>ending_date</placeholder>
				<type>field</type>
			</argument>

		<output>date</output>
		<description>
			 Returns difference between dates in days. 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>datediff_in_hours</name>
		<syntax>datediff_in_hours( Starting_date ,Ending_date)</syntax>
			<body>datediff_in_hours(${starting_date},${ending_date})</body>
			<argument>
				<name>starting_date</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>starting date</argument_description>
				<placeholder>starting_date</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>ending_date</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>ending_date</argument_description>
				<placeholder>ending_date</placeholder>
				<type>field</type>
			</argument>

		<output>date</output>
		<description>
			 Returns difference between dates in hours. 
		</description>
		<type>time</type>
	</formula>
	
	<formula >
		<name>datediff_in_minutes</name>
		<syntax>datediff_in_minutes( Starting_date ,Ending_date)</syntax>
			<body>datediff_in_minutes(${starting_date},${ending_date})</body>
			<argument>
				<name>starting_date</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>starting date</argument_description>
				<placeholder>starting_date</placeholder>
				<type>field</type>
			</argument>
			
			<argument>
				<name>ending_date</name>
				<expected_value></expected_value>
				<default_value></default_value>
				<argument_description>ending_date</argument_description>
				<placeholder>ending_date</placeholder>
				<type>field</type>
			</argument>

		<output>date</output>
		<description>
			 Returns difference between dates in minutes. 
		</description>
		<type>time</type>
	</formula>
	
	
	
	<formula>
		<name>Distance</name>
		<syntax>distance (Geom1, Geom2, Tol, Unit)</syntax>
		<body>distance(${geom1}, ${geom2}, ${tol}, ${unit})</body>
		
		<argument>
			<name>Geom1</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object whose distance from geom2 is to be computed.</argument_description>
			<placeholder>geom1</placeholder>
			<type>field</type>
		</argument>
		
		<argument>
			<name>Geom2</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object whose distance from geom1 is to be computed.</argument_description>
			<placeholder>geom2</placeholder>
			<type>field</type>
		</argument>
		<argument>
			<name>Tol</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Tolerance value</argument_description>
			<placeholder>tol</placeholder>
		</argument>
		
		<argument>
			<name>Unit</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Unit of measurement.</argument_description>
			<placeholder>unit</placeholder>
			<type>string</type>
		</argument>
		
		
		<output>Number</output>
		<description>Returns the distance between two geometry objects.</description>
		<type>space</type>
	</formula>
	
<!-- 	<formula> -->
<!-- 		<name>Dwithin</name> -->
<!-- 		<syntax>Dwithin (Geom1, Dim1, Dist, Geom2, Dim2, Tol)</syntax> -->
<!-- 		<body>Dwithin(${geom1}, ${dim1}, ${dist}, ${geom2}, ${dim2}, ${tol})</body> -->
		
<!-- 		<argument> -->
<!-- 			<name>Geom1</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Geometry object.</argument_description> -->
<!-- 			<placeholder>geom1</placeholder> -->
<!-- 		</argument> -->
<!-- 		<argument> -->
<!-- 			<name>Dim1</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Dimensional information array corresponding to geom1.</argument_description> -->
<!-- 			<placeholder>dim1</placeholder> -->
<!-- 		</argument> -->
<!-- 		<argument> -->
<!-- 			<name>Dist</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Distance value.</argument_description> -->
<!-- 			<placeholder>dist</placeholder> -->
<!-- 		</argument> -->
<!-- 		<argument> -->
<!-- 			<name>Geom2</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Geometry object.</argument_description> -->
<!-- 			<placeholder>geom2</placeholder> -->
<!-- 		</argument> -->
<!-- 		<argument> -->
<!-- 			<name>Dim2</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Dimensional information array corresponding to geom2.</argument_description> -->
<!-- 			<placeholder>Dim2</placeholder> -->
<!-- 		</argument>		 -->
<!-- 		<argument> -->
<!-- 			<name>Tol</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Tolerance value</argument_description> -->
<!-- 			<placeholder>tol</placeholder> -->
<!-- 		</argument> -->
		
<!-- 		<output>Boolean</output> -->
<!-- 		<description>Returns TRUE for object pairs that are within the specified distance, and FALSE otherwise.</description> -->
<!-- 		<type>space</type> -->
<!-- 	</formula> -->
	
	<formula>
		<name>Dimension</name>
		<syntax>Dimension ()</syntax>
		<body>Dimension()</body>
		
		<output>Number</output>
		<description>Returns the number of dimensions of a geometry object.</description>
		<type>space</type>
	</formula>
	
<!-- 	<formula> -->
<!-- 		<name>Difference</name> -->
<!-- 		<syntax>Difference (Geom1, Geom2, Tol)</syntax> -->
<!-- 		<body>Difference(${geom1}, ${geom2}, ${tol})</body> -->
		
<!-- 		<argument> -->
<!-- 			<name>Geom1</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Geometry object.</argument_description> -->
<!-- 			<placeholder>geom1</placeholder> -->
<!-- 		</argument> -->
<!-- 		<argument> -->
<!-- 			<name>Geom2</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Geometry object.</argument_description> -->
<!-- 			<placeholder>geom2</placeholder> -->
<!-- 		</argument>	 -->
<!-- 		<argument> -->
<!-- 			<name>Tol</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Tolerance value</argument_description> -->
<!-- 			<placeholder>tol</placeholder> -->
<!-- 		</argument> -->
		
<!-- 		<output>Object</output> -->
<!-- 		<description>Returns a geometry object that is the topological difference of two geometry objects.</description> -->
<!-- 		<type>space</type> -->
<!-- 	</formula> -->
	
	<formula>
		<name>Centroid</name>
		<syntax>Centroid (Geom1, Tol)</syntax>
		<body>Centroid(${geom1}, ${tol})</body>
		
		<argument>
			<name>Geom1</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object.</argument_description>
			<placeholder>geom1</placeholder>
			<type>field</type>
		</argument>
		
		<argument>
			<name>Tol</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Tolerance value</argument_description>
			<placeholder>tol</placeholder>
		</argument>
		
		<output>Number</output>
		<description>Returns a point geometry that is the centroid of a polygon, multipolygon, point, or point cluster.</description>
		<type>space</type>
	</formula>
	
	<formula>
		<name>Geometrytype</name>
		<syntax>Geometrytype ()</syntax>
		<body>Geometrytype()</body>
		
		<output>Number</output>
		<description>Returns the geometry type of a geometry object.</description>
		<type>space</type>
	</formula>
	
<!-- 	<formula> -->
<!-- 		<name>Union</name> -->
<!-- 		<syntax>Union (Geom1, Dim1, Geom2, Dim2, Tol)</syntax> -->
<!-- 		<body>Union(${geom1}, ${dim1}, ${geom2}, ${dim2}, ${tol})</body> -->
		
<!-- 		<argument> -->
<!-- 			<name>Geom1</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Geometry object.</argument_description> -->
<!-- 			<placeholder>geom1</placeholder> -->
<!-- 		</argument> -->
<!-- 		<argument> -->
<!-- 			<name>Geom2</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Geometry object.</argument_description> -->
<!-- 			<placeholder>geom2</placeholder> -->
<!-- 		</argument>	 -->
<!-- 		<argument> -->
<!-- 			<name>Tol</name> -->
<!-- 			<expected_value></expected_value> -->
<!-- 			<default_value></default_value> -->
<!-- 			<argument_description>Tolerance value</argument_description> -->
<!-- 			<placeholder>tol</placeholder> -->
<!-- 		</argument> -->
		
<!-- 		<output>Object</output> -->
<!-- 		<description>Returns a geometry object that is the topological union (OR operation) of two geometry objects.</description> -->
<!-- 		<type>space</type> -->
<!-- 	</formula> -->
	
	<formula>
		<name>length_spa</name>
		<syntax>length_spa (Geom, Tol, Unit)</syntax>
		<body>length_spa(${geom}, ${tol}, ${unit})</body>
		
		<argument>
			<name>Geom1</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object.</argument_description>
			<placeholder>geom</placeholder>
			<type>field</type>
		</argument>
		<argument>
			<name>Tol</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Tolerance value</argument_description>
			<placeholder>tol</placeholder>
			
		</argument>
		<argument>
			<name>Unit</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Unit of measurement.</argument_description>
			<placeholder>unit</placeholder>
			<type>string</type>
		</argument>
		
		
		<output>Number</output>
		<description>Returns the length or perimeter of a geometry object.</description>
		<type>space</type>
	</formula>
	
	<formula>
		<name>Relate</name>
		<syntax>Relate (Geom1, Mask, Geom2, Tol)</syntax>
		<body>Relate(${geom1}, ${mask}, ${geom2}, ${tol}))</body>
		
		<argument>
			<name>Geom1</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object.</argument_description>
			<placeholder>geom1</placeholder>
			<type>field</type>
		</argument>
		<argument>
			<name>Mask</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Specifies a list of relationships to check.</argument_description>
			<placeholder>mask</placeholder>
			<type>string</type>
		</argument>
		<argument>
			<name>Geom2</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object.</argument_description>
			<placeholder>geom2</placeholder>
			<type>field</type>
		</argument>
		
		<argument>
			<name>Tol</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Tolerance value</argument_description>
			<placeholder>tol</placeholder>
		</argument>
		
		<output>String</output>
		<description>Examines two geometry objects to determine their spatial relationship.</description>
		<type>space</type>
	</formula>
	
	<formula>
		<name>Intersection</name>
		<syntax>Intersection (Geom1, Geom2, Tol)</syntax>
		<body>Intersection(${geom1},  ${geom2}, ${tol}))</body>
		
		<argument>
			<name>Geom1</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object.</argument_description>
			<placeholder>geom1</placeholder>
			<type>field</type>
		</argument>
		
		<argument>
			<name>Geom2</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Geometry object.</argument_description>
			<placeholder>geom2</placeholder>
			<type>field</type>
		</argument>
		
		<argument>
			<name>Tol</name>
			<expected_value></expected_value>
			<default_value></default_value>
			<argument_description>Tolerance value</argument_description>
			<placeholder>tol</placeholder>
		</argument>
		
		<output>String</output>
		<description>Examines two geometry objects to determine their spatial relationship.</description>
		<type>space</type>
	</formula>
	
	<formula>
		<name>Case</name>
		<syntax>Case  when condition then true_expression else false_expression end </syntax>
		<body>Case when ${condition}  then ${true_expression} else ${false_expression} end</body>
		
		<argument>
			<name>condition</name>
			<expected_value/>
			<default_value/>
			<argument_description>condition</argument_description>
			<placeholder>condition</placeholder>
		</argument>
		<argument>
			<name>true_expression</name>
			<expected_value/>
			<default_value/>
			<argument_description>true_expression</argument_description>
			<placeholder>true_expression</placeholder>
		</argument>
		<argument>
			<name>false_expression</name>
			<expected_value/>
			<default_value/>
			<argument_description>false_expression</argument_description>
			<placeholder>false_expression</placeholder>
		</argument>
		<output>Object</output>
		<description>Returns the result if condition is true.</description>
		<type>sql</type>
	</formula>

	
 
</formulas>
