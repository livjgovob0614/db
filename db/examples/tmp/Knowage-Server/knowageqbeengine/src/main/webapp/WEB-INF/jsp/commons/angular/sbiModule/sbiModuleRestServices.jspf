<%-- Knowage, Open Source Business Intelligence suite
Copyright (C) 2016 Engineering Ingegneria Informatica S.p.A.

Knowage is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

Knowage is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
--%>

<script>
angular.module('sbiModule')

.service('sbiModule_restServices', function($http, $q, sbiModule_config,sbiModule_logger,sbiModule_translate,$mdPanel,$injector,$timeout) {
	
	var alteredContextPath=null;

	this.alterContextPath=function(cpat){		
		alteredContextPath=cpat;
	}

	function getBaseUrl(endP_path) {		
		var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path +"/" : alteredContextPath+ "/restful-services/" + endP_path+"/" 
 
		alteredContextPath=null;
		return burl ;
	};
	
	this.getCompleteBaseUrl = function(endP_path) {		
		var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path  : alteredContextPath+ "/restful-services/" + endP_path 
		alteredContextPath=null;
		burl = sbiModule_config.protocol+"://"+sbiModule_config.host+":"+sbiModule_config.port+burl;
		return burl ;
	};	
	
	this.get = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? 
				item = "" : 
					item = "?" + encodeURIComponent(item)
							.replace(/'/g,"%27")
							.replace(/"/g,"%22")
							.replace(/%3D/g,"=")
							.replace(/%26/g,"&");
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		return $http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.remove = function(endP_path, req_Path, item, conf) {
		item == undefined ? item = "" : item = "?" + item;
		sbiModule_logger.trace("REMOVE: "+endP_path+"/"+req_Path + "" + item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.post = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("POST: "+endP_path+"/"+ req_Path,item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.put = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("PUT: "+endP_path+"/"+req_Path,item,conf);
		return $http.put(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.delete = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
		sbiModule_logger.trace("PUT:" +endP_path+"/"+req_Path+ "" + item,conf);
		return $http.delete(getBaseUrl(endP_path) + "" + req_Path, conf);
	};
		
	/*
	NEW METHODS
	*/
	var genericErrorHandling = function(data, status, headers, config, deferred) {
		if(data.status==401){
			console.log("request unauthorized");
			$injector.get('sbiModule_messaging').showWarningMessage(sbiModule_translate.load('kn.qbe.sessionexpired.msg'),"",3000);
			$timeout(redirectToLoginUrl, 3000);
		
		}else{
			deferred.reject(data, status, headers, config);	
		}
 		
	};
	
	
	var redirectToLoginUrl = function() {
    	var sessionExpiredSpagoBIJSFound = false;
    	var loginUrl = sbiModule_config.externalBasePath;
    	try {
    		var currentWindow = window;
    		var parentWindow = parent;
    		while (parentWindow != currentWindow) {
    			if (parentWindow.sessionExpiredSpagoBIJS) {
    				parentWindow.location = loginUrl;
    				sessionExpiredSpagoBIJSFound = true;
    				break;
    			} else {
    				currentWindow = parentWindow;
    				parentWindow = currentWindow.parent;
    			}
    		}
    	} catch (err) {
    		console.log(err);
    	}
    	
    	if (!sessionExpiredSpagoBIJSFound) {
    		window.location = loginUrl;
    	}
    };
	
	var handleResponse = function(data, status, headers, config, deferred) {
		console.log(data);
		if(data.data != null){
			if ( data.data.hasOwnProperty("errors")) {
			
				genericErrorHandling(data, status, headers, config, deferred);
			} else {
				deferred.resolve(data, status, headers, config);
			}	
		}else{
			if ( data.status == 201) {
				deferred.resolve(data, status, headers, config);
				
			} else {
				genericErrorHandling(data, status, headers, config, deferred);
			}	
			
		}
		/////////////////////////////////////
	};
	
	

	// SAMPLE METHOD, this will be the implementation
	this.promiseGet = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		// Required for passing JSON on a GET request
		if (item == undefined || item==null) {
			item = "";
		}else {
			item = "?" + 
				encodeURIComponent(item)
				.replace(/'/g,"%27")
				.replace(/"/g,"%22")
				.replace(/%3D/g,"=")
				.replace(/%26/g,"&");
		}
		
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePost = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("POST: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.post(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePut = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("PUT: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.put(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promiseDelete = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("DELETE: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.delete(getBaseUrl(endP_path) + "" + req_Path, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.errorHandler=function(text,title){
		var deferred = $q.defer();
		var titleFin= title ? sbiModule_translate.load(title) : "";
		var textFin=text;
		
		if(angular.isObject(text)){
			if(text.hasOwnProperty("errors") || text.hasOwnProperty("warnings")){
				var messages = text.errors || text.warnings;
				textFin="";
				for(var i=0;i<messages.length;i++){
					textFin+=sbiModule_translate.load(messages[i].message)+" <br> ";
				}
			}else{
				textFin=sbiModule_translate.load(JSON.stringify(text));
			}
		}else{
			textFin=sbiModule_translate.load(text);
		}
		
		
		  var config = {
				    attachTo: angular.element(document.body),
				    locals :{title:titleFin,text:textFin},
				    controller: function($scope,mdPanelRef,sbiModule_translate,title,text){
				    	$scope.title=title;
				    	$scope.text=text;
				    	$scope.ok=sbiModule_translate.load("sbi.general.ok");
				    	
				    	$scope.closeDialog=function(){
				    		mdPanelRef.close();
				    	}
				    },
				    disableParentScroll: true,
				    template: '<md-card>'+
				    	 		'<md-card-title style="   min-width: 300px; max-height: 400px;max-width: 600px; overflow: auto;">'+
			          			'	<md-card-title-text>'+
			            		'		<span class="md-headline">{{title}}</span>'+
			            		'		<span class="md-subhead"  ng-bind-html="text"> </span>'+
			          			'	</md-card-title-text>'+
			          			'</md-card-title>'+
			          			'<md-card-actions layout="row" layout-align="end center">'+
			                   	 '<md-button ng-click="closeDialog()">{{ok}}</md-button>'+
			                  '</md-card-actions>'+
			          		'</md-card>',
				    hasBackdrop: true,
				    position: $mdPanel.newPanelPosition().absolute().center(),
				    trapFocus: true,
				    zIndex: 150,
				    clickOutsideToClose: true,
				    escapeToClose: true,
				    focusOnOpen: true,
				    onRemoving :function(){
				      deferred.resolve();
				    }
				  };
		  
		$mdPanel.open(config);
		return deferred.promise;
		
	}
	
  });
	
</script>