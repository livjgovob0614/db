<%-- Knowage, Open Source Business Intelligence suite
Copyright (C) 2016 Engineering Ingegneria Informatica S.p.A.

Knowage is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

Knowage is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
--%>

<script>

	angular.module('sbiModule')
	
	.service('sbiModule_action',function($http,$q,sbiModule_config,$httpParamSerializer,sbiModule_logger){
		
		var alteredContextPath=null;

		this.alterContextPath = function(cpat){
			alteredContextPath = cpat;
		}
		
		this.promiseGet = function(actionName,queryParams,conf){
			var url;
			var deferred = $q.defer();
			
			url = addQueryParams(getBaseUrl(),actionName,queryParams);
			
			sbiModule_logger.trace("GET: " +actionName);
			
			$http.get(url,conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);
			
			return deferred.promise;
		}
		
		this.promisePost = function(actionName,queryParams,item,conf){
			
			var url;
			var deferred = $q.defer();
			
			url = addQueryParams(getBaseUrl(),actionName,queryParams);
			$http.post(url,item,conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);
			
			return deferred.promise;
		}
		
		var genericErrorHandling = function(data, status, headers, config, deferred) {
			if(data.status==401){
				console.log("request unauthorized");
				redirectToLoginUrl();
			}else{
				deferred.reject(data, status, headers, config);	
			}
				
			  		
		};
		
		var handleResponse = function(data, status, headers, config, deferred) {
			if(data.data != null){
				if ( data.data.hasOwnProperty("errors")) {
					
					genericErrorHandling(data, status, headers, config, deferred);
				} else {
					deferred.resolve(data, status, headers, config);
				}	
			}else{
				if ( data.status == 201) {
					deferred.resolve(data, status, headers, config);
					
				} else {
					genericErrorHandling(data, status, headers, config, deferred);
				}	
				
			}
			
		};
		
		var redirectToLoginUrl = function() {
	    	var sessionExpiredSpagoBIJSFound = false;
	    	try {
	    		var currentWindow = window;
	    		var parentWindow = parent;
	    		while (parentWindow != currentWindow) {
	    			if (parentWindow.sessionExpiredSpagoBIJS) {
	    				parentWindow.location = loginUrl;
	    				sessionExpiredSpagoBIJSFound = true;
	    				break;
	    			} else {
	    				currentWindow = parentWindow;
	    				parentWindow = currentWindow.parent;
	    			}
	    		}
	    	} catch (err) {
	    		console.log(err);
	    	}
	    	
	    	if (!sessionExpiredSpagoBIJSFound) {
	    		window.location = sbiModule_config.externalBasePath;
	    	}
	    };
	    
	    var addQueryParams = function(url,actionName,queryParams){
	    	
	    	var queryParamsObject = {};
	    	
	    	if(angular.isObject(queryParams)){
				queryParamsObject = queryParams;
			}
	    	
	    	queryParamsObject.ACTION_NAME = actionName;
			queryParamsObject.SBI_EXECUTION_ID = sbiModule_config.sbiExecutionID;
			queryParamsObjectString = $httpParamSerializer(queryParamsObject);
			
			return url+"?" + queryParamsObjectString;
	    }
	    
	    function getBaseUrl() {		
			var burl= alteredContextPath==null? sbiModule_config.contextName +'/servlet/AdapterHTTP'  : alteredContextPath+ "/servlet/AdapterHTTP" + endP_path 
			alteredContextPath=null;
			return burl ;
		};
	    
	})

</script>